<svg height="3797" width="1433" xmlns="http://www.w3.org/2000/svg" xmlns:ed="https://www.edrawsoft.cn/xml/2017/SVGExtensions/" ed:hSpacing="30" ed:vSpacing="30" xmlns:xlink="http://www.w3.org/1999/xlink" viewBox="0 0 1433 3797" xmlns:ev="http://www.w3.org/2001/xml-events" ed:name="Page-1" id="page100"><style type="text/css"><![CDATA[
g[ed\:togtopicid],g[ed\:hyperlink],g[ed\:comment],g[ed\:note] {cursor:pointer;}
g[id] {-moz-user-select: none;-ms-user-select: none;user-select: none;}
svg text::selection,svg tspan::selection{background-color: #4285f4;color: #ffffff;fill: #ffffff;}
.st2 {fill:#303030;font-family:微软雅黑;font-size:12pt}
.st3 {fill:#454545;font-family:微软雅黑;font-size:10pt}
.st1 {fill:#ffffff;font-family:微软雅黑;font-size:14pt}
]]></style><defs><linearGradient x2="0%" y2="100%" y1="0%" x1="0%" id="lg1"><stop offset="0" stop-color="#ffffff"/><stop offset="0.25" stop-color="#f0f5f0"/><stop offset="0.75" stop-color="#e1ebe1"/><stop offset="1" stop-color="#c8d7c8"/></linearGradient></defs><rect height="3797" y="0" width="1433" fill="#ffffff" x="0"/><path transform="matrix(1,0,0,1,257,1094)" stroke="#696969" stroke-linecap="round" fill="none" ed:parentid="101" d="M-71.1,776.1C19.8,560.6,-83.4,-804.6,99,-804.6" ed:tosuperid="102" stroke-linejoin="round" id="103"/><path transform="matrix(1,0,0,1,257,1408)" stroke="#696969" stroke-linecap="round" fill="none" ed:parentid="101" d="M-64.6,462.1C14.8,300.8,-78.8,-490.6,99,-490.6" ed:tosuperid="104" stroke-linejoin="round" id="105"/><path transform="matrix(1,0,0,1,257,1694)" stroke="#696969" stroke-linecap="round" fill="none" ed:parentid="101" d="M-54.1,176.1C2.5,83.3,-35.2,-204.6,99,-204.6" ed:tosuperid="106" stroke-linejoin="round" id="107"/><path transform="matrix(1,0,0,1,257,1982)" stroke="#696969" stroke-linecap="round" fill="none" ed:parentid="101" d="M-38.8,-54.6C4.5,-7.1,22.2,83.1,99,83.1" ed:tosuperid="108" stroke-linejoin="round" id="109"/><path transform="matrix(1,0,0,1,257,2238)" stroke="#696969" stroke-linecap="round" fill="none" ed:parentid="101" d="M-59.5,-310.9C10.1,-182.1,-71.5,339.4,99,339.4" ed:tosuperid="110" stroke-linejoin="round" id="111"/><path transform="matrix(1,0,0,1,257,2399)" stroke="#696969" stroke-linecap="round" fill="none" ed:parentid="101" d="M-64.9,-471.9C15.1,-308.6,-79,500.4,99,500.4" ed:tosuperid="112" stroke-linejoin="round" id="113"/><path transform="matrix(1,0,0,1,257,2546)" stroke="#696969" stroke-linecap="round" fill="none" ed:parentid="101" d="M-68.3,-618.6C17.7,-428.6,-81.5,647.1,99,647.1" ed:tosuperid="114" stroke-linejoin="round" id="115"/><path transform="matrix(1,0,0,1,257,2730)" stroke="#696969" stroke-linecap="round" fill="none" ed:parentid="101" d="M-71.4,-802.9C20.1,-583.3,-83.6,831.4,99,831.4" ed:tosuperid="116" stroke-linejoin="round" id="117"/><path transform="matrix(1,0,0,1,567,195)" stroke="#696969" stroke-linecap="round" fill="none" ed:parentid="102" d="M-13.5,93.9C5.4,93.9,-13.5,-93.9,13.5,-93.9" ed:tosuperid="118" stroke-linejoin="round" id="119"/><path transform="matrix(1,0,0,1,751,86)" stroke="#696969" stroke-linecap="round" fill="none" ed:parentid="118" d="M-13.5,15.5C0.8,15.5,-2.8,-15.5,13.5,-15.5" ed:tosuperid="120" stroke-linejoin="round" id="121"/><path transform="matrix(1,0,0,1,751,114)" stroke="#696969" stroke-linecap="round" fill="none" ed:parentid="118" d="M-13.5,-12.5C0.2,-12.5,-1.3,12.5,13.5,12.5" ed:tosuperid="122" stroke-linejoin="round" id="123"/><path transform="matrix(1,0,0,1,751,130)" stroke="#696969" stroke-linecap="round" fill="none" ed:parentid="118" d="M-13.5,-28C3.2,-28,-8.3,28,13.5,28" ed:tosuperid="124" stroke-linejoin="round" id="125"/><path transform="matrix(1,0,0,1,567,331)" stroke="#696969" stroke-linecap="round" fill="none" ed:parentid="102" d="M-13.5,-41.9C4.9,-41.9,-12.3,41.9,13.5,41.9" ed:tosuperid="126" stroke-linejoin="round" id="127"/><path transform="matrix(1,0,0,1,712,286)" stroke="#696969" stroke-linecap="round" fill="none" ed:parentid="126" d="M-13.5,87.5C5.4,87.5,-13.5,-87.5,13.5,-87.5" ed:tosuperid="128" stroke-linejoin="round" id="129"/><path transform="matrix(1,0,0,1,712,318)" stroke="#696969" stroke-linecap="round" fill="none" ed:parentid="126" d="M-13.5,54.8C5.4,54.8,-13.5,-54.8,13.5,-54.8" ed:tosuperid="130" stroke-linejoin="round" id="131"/><path transform="matrix(1,0,0,1,712,356)" stroke="#696969" stroke-linecap="round" fill="none" ed:parentid="126" d="M-13.5,17.3C1.2,17.3,-3.7,-17.3,13.5,-17.3" ed:tosuperid="132" stroke-linejoin="round" id="133"/><path transform="matrix(1,0,0,1,712,386)" stroke="#696969" stroke-linecap="round" fill="none" ed:parentid="126" d="M-13.5,-12.5C0.2,-12.5,-1.3,12.5,13.5,12.5" ed:tosuperid="134" stroke-linejoin="round" id="135"/><path transform="matrix(1,0,0,1,712,411)" stroke="#696969" stroke-linecap="round" fill="none" ed:parentid="126" d="M-13.5,-37.5C4.5,-37.5,-11.4,37.5,13.5,37.5" ed:tosuperid="136" stroke-linejoin="round" id="137"/><path transform="matrix(1,0,0,1,712,440)" stroke="#696969" stroke-linecap="round" fill="none" ed:parentid="126" d="M-13.5,-67.3C5.4,-67.3,-13.5,67.3,13.5,67.3" ed:tosuperid="138" stroke-linejoin="round" id="139"/><path transform="matrix(1,0,0,1,712,465)" stroke="#696969" stroke-linecap="round" fill="none" ed:parentid="126" d="M-13.5,-92.3C5.4,-92.3,-13.5,92.3,13.5,92.3" ed:tosuperid="140" stroke-linejoin="round" id="141"/><path transform="matrix(1,0,0,1,567,794)" stroke="#696969" stroke-linecap="round" fill="none" ed:parentid="104" d="M-13.5,123.1C5.4,123.1,-13.5,-123.1,13.5,-123.1" ed:tosuperid="142" stroke-linejoin="round" id="143"/><path transform="matrix(1,0,0,1,567,878)" stroke="#696969" stroke-linecap="round" fill="none" ed:parentid="104" d="M-13.5,39.1C4.7,39.1,-11.8,-39.1,13.5,-39.1" ed:tosuperid="144" stroke-linejoin="round" id="145"/><path transform="matrix(1,0,0,1,725,799)" stroke="#696969" stroke-linecap="round" fill="none" ed:parentid="144" d="M-13.5,40.5C4.8,40.5,-12.1,-40.5,13.5,-40.5" ed:tosuperid="146" stroke-linejoin="round" id="147"/><path transform="matrix(1,0,0,1,725,827)" stroke="#696969" stroke-linecap="round" fill="none" ed:parentid="144" d="M-13.5,12.5C0.2,12.5,-1.3,-12.5,13.5,-12.5" ed:tosuperid="148" stroke-linejoin="round" id="149"/><path transform="matrix(1,0,0,1,725,859)" stroke="#696969" stroke-linecap="round" fill="none" ed:parentid="144" d="M-13.5,-20.3C1.8,-20.3,-5.1,20.3,13.5,20.3" ed:tosuperid="150" stroke-linejoin="round" id="151"/><path transform="matrix(1,0,0,1,725,880)" stroke="#696969" stroke-linecap="round" fill="none" ed:parentid="144" d="M-13.5,-40.5C4.8,-40.5,-12.1,40.5,13.5,40.5" ed:tosuperid="152" stroke-linejoin="round" id="153"/><path transform="matrix(1,0,0,1,567,959)" stroke="#696969" stroke-linecap="round" fill="none" ed:parentid="104" d="M-13.5,-41.9C4.9,-41.9,-12.3,41.9,13.5,41.9" ed:tosuperid="154" stroke-linejoin="round" id="155"/><path transform="matrix(1,0,0,1,686,989)" stroke="#696969" stroke-linecap="round" fill="none" ed:parentid="154" d="M-13.5,12.5C0.2,12.5,-1.3,-12.5,13.5,-12.5" ed:tosuperid="156" stroke-linejoin="round" id="157"/><path transform="matrix(1,0,0,1,686,1021)" stroke="#696969" stroke-linecap="round" fill="none" ed:parentid="154" d="M-13.5,-20.3C1.8,-20.3,-5.1,20.3,13.5,20.3" ed:tosuperid="158" stroke-linejoin="round" id="159"/><path transform="matrix(1,0,0,1,567,1007)" stroke="#696969" stroke-linecap="round" fill="none" ed:parentid="104" d="M-13.5,-90.1C5.4,-90.1,-13.5,90.1,13.5,90.1" ed:tosuperid="160" stroke-linejoin="round" id="161"/><path transform="matrix(1,0,0,1,567,1056)" stroke="#696969" stroke-linecap="round" fill="none" ed:parentid="104" d="M-13.5,-138.4C5.4,-138.4,-13.5,138.4,13.5,138.4" ed:tosuperid="162" stroke-linejoin="round" id="163"/><path transform="matrix(1,0,0,1,519,1403)" stroke="#696969" stroke-linecap="round" fill="none" ed:parentid="106" d="M-13.5,86.1C5.4,86.1,-13.5,-86.1,13.5,-86.1" ed:tosuperid="164" stroke-linejoin="round" id="165"/><path transform="matrix(1,0,0,1,519,1431)" stroke="#696969" stroke-linecap="round" fill="none" ed:parentid="106" d="M-13.5,58.1C5.4,58.1,-13.5,-58.1,13.5,-58.1" ed:tosuperid="166" stroke-linejoin="round" id="167"/><path transform="matrix(1,0,0,1,519,1456)" stroke="#696969" stroke-linecap="round" fill="none" ed:parentid="106" d="M-13.5,33.1C4,33.1,-10.1,-33.1,13.5,-33.1" ed:tosuperid="168" stroke-linejoin="round" id="169"/><path transform="matrix(1,0,0,1,519,1481)" stroke="#696969" stroke-linecap="round" fill="none" ed:parentid="106" d="M-13.5,8.1C-0.8,8.1,1,-8.1,13.5,-8.1" ed:tosuperid="170" stroke-linejoin="round" id="171"/><path transform="matrix(1,0,0,1,519,1506)" stroke="#696969" stroke-linecap="round" fill="none" ed:parentid="106" d="M-13.5,-16.9C1.1,-16.9,-3.5,16.9,13.5,16.9" ed:tosuperid="172" stroke-linejoin="round" id="173"/><path transform="matrix(1,0,0,1,519,1531)" stroke="#696969" stroke-linecap="round" fill="none" ed:parentid="106" d="M-13.5,-41.9C4.9,-41.9,-12.3,41.9,13.5,41.9" ed:tosuperid="174" stroke-linejoin="round" id="175"/><path transform="matrix(1,0,0,1,519,1561)" stroke="#696969" stroke-linecap="round" fill="none" ed:parentid="106" d="M-13.5,-71.6C5.4,-71.6,-13.5,71.6,13.5,71.6" ed:tosuperid="176" stroke-linejoin="round" id="177"/><path transform="matrix(1,0,0,1,519,1591)" stroke="#696969" stroke-linecap="round" fill="none" ed:parentid="106" d="M-13.5,-101.4C5.4,-101.4,-13.5,101.4,13.5,101.4" ed:tosuperid="178" stroke-linejoin="round" id="179"/><path transform="matrix(1,0,0,1,567,1960)" stroke="#696969" stroke-linecap="round" fill="none" ed:parentid="108" d="M-13.5,104.6C5.4,104.6,-13.5,-104.6,13.5,-104.6" ed:tosuperid="180" stroke-linejoin="round" id="181"/><path transform="matrix(1,0,0,1,751,1838)" stroke="#696969" stroke-linecap="round" fill="none" ed:parentid="180" d="M-13.5,17.3C1.2,17.3,-3.7,-17.3,13.5,-17.3" ed:tosuperid="182" stroke-linejoin="round" id="183"/><path transform="matrix(1,0,0,1,751,1874)" stroke="#696969" stroke-linecap="round" fill="none" ed:parentid="180" d="M-13.5,-18.5C1.5,-18.5,-4.3,18.5,13.5,18.5" ed:tosuperid="184" stroke-linejoin="round" id="185"/><path transform="matrix(1,0,0,1,751,1899)" stroke="#696969" stroke-linecap="round" fill="none" ed:parentid="180" d="M-13.5,-43.5C5,-43.5,-12.6,43.5,13.5,43.5" ed:tosuperid="186" stroke-linejoin="round" id="187"/><path transform="matrix(1,0,0,1,567,2082)" stroke="#696969" stroke-linecap="round" fill="none" ed:parentid="108" d="M-13.5,-16.9C1.1,-16.9,-3.5,16.9,13.5,16.9" ed:tosuperid="188" stroke-linejoin="round" id="189"/><path transform="matrix(1,0,0,1,738,2091)" stroke="#696969" stroke-linecap="round" fill="none" ed:parentid="188" d="M-13.5,7.8C-0.9,7.8,1.2,-7.8,13.5,-7.8" ed:tosuperid="190" stroke-linejoin="round" id="191"/><path transform="matrix(1,0,0,1,738,2106)" stroke="#696969" stroke-linecap="round" fill="none" ed:parentid="188" d="M-13.5,-7.8C-0.9,-7.8,1.2,7.8,13.5,7.8" ed:tosuperid="192" stroke-linejoin="round" id="193"/><path transform="matrix(1,0,0,1,738,2127)" stroke="#696969" stroke-linecap="round" fill="none" ed:parentid="188" d="M-13.5,-28C3.2,-28,-8.3,28,13.5,28" ed:tosuperid="194" stroke-linejoin="round" id="195"/><path transform="matrix(1,0,0,1,738,2152)" stroke="#696969" stroke-linecap="round" fill="none" ed:parentid="188" d="M-13.5,-53C5.4,-53,-13.5,53,13.5,53" ed:tosuperid="196" stroke-linejoin="round" id="197"/><path transform="matrix(1,0,0,1,567,2192)" stroke="#696969" stroke-linecap="round" fill="none" ed:parentid="108" d="M-13.5,-127.6C5.4,-127.6,-13.5,127.6,13.5,127.6" ed:tosuperid="198" stroke-linejoin="round" id="199"/><path transform="matrix(1,0,0,1,764,2295)" stroke="#696969" stroke-linecap="round" fill="none" ed:parentid="198" d="M-13.5,25C2.7,25,-7.2,-25,13.5,-25" ed:tosuperid="200" stroke-linejoin="round" id="201"/><path transform="matrix(1,0,0,1,764,2328)" stroke="#696969" stroke-linecap="round" fill="none" ed:parentid="198" d="M-13.5,-7.8C-0.9,-7.8,1.2,7.8,13.5,7.8" ed:tosuperid="202" stroke-linejoin="round" id="203"/><path transform="matrix(1,0,0,1,764,2353)" stroke="#696969" stroke-linecap="round" fill="none" ed:parentid="198" d="M-13.5,-32.8C3.9,-32.8,-10,32.8,13.5,32.8" ed:tosuperid="204" stroke-linejoin="round" id="205"/><path transform="matrix(1,0,0,1,567,2590)" stroke="#696969" stroke-linecap="round" fill="none" ed:parentid="110" d="M-13.5,-12.6C0.2,-12.6,-1.4,12.6,13.5,12.6" ed:tosuperid="206" stroke-linejoin="round" id="207"/><path transform="matrix(1,0,0,1,660,2587)" stroke="#696969" stroke-linecap="round" fill="none" ed:parentid="206" d="M-13.5,15.5C0.8,15.5,-2.8,-15.5,13.5,-15.5" ed:tosuperid="208" stroke-linejoin="round" id="209"/><path transform="matrix(1,0,0,1,660,2603)" stroke="#696969" stroke-linecap="round" fill="none" ed:parentid="206" d="M-13.5,0C-2.7,0,5.4,0,13.5,0" ed:tosuperid="210" stroke-linejoin="round" id="211"/><path transform="matrix(1,0,0,1,660,2618)" stroke="#696969" stroke-linecap="round" fill="none" ed:parentid="206" d="M-13.5,-15.5C0.8,-15.5,-2.8,15.5,13.5,15.5" ed:tosuperid="212" stroke-linejoin="round" id="213"/><path transform="matrix(1,0,0,1,567,2636)" stroke="#696969" stroke-linecap="round" fill="none" ed:parentid="110" d="M-13.5,-59.1C5.4,-59.1,-13.5,59.1,13.5,59.1" ed:tosuperid="214" stroke-linejoin="round" id="215"/><path transform="matrix(1,0,0,1,712,2680)" stroke="#696969" stroke-linecap="round" fill="none" ed:parentid="214" d="M-13.5,15.5C0.8,15.5,-2.8,-15.5,13.5,-15.5" ed:tosuperid="216" stroke-linejoin="round" id="217"/><path transform="matrix(1,0,0,1,712,2696)" stroke="#696969" stroke-linecap="round" fill="none" ed:parentid="214" d="M-13.5,0C-2.7,0,5.4,0,13.5,0" ed:tosuperid="218" stroke-linejoin="round" id="219"/><path transform="matrix(1,0,0,1,712,2711)" stroke="#696969" stroke-linecap="round" fill="none" ed:parentid="214" d="M-13.5,-15.5C0.8,-15.5,-2.8,15.5,13.5,15.5" ed:tosuperid="220" stroke-linejoin="round" id="221"/><path transform="matrix(1,0,0,1,567,2842)" stroke="#696969" stroke-linecap="round" fill="none" ed:parentid="112" d="M-13.5,57.6C5.4,57.6,-13.5,-57.6,13.5,-57.6" ed:tosuperid="222" stroke-linejoin="round" id="223"/><path transform="matrix(1,0,0,1,567,2857)" stroke="#696969" stroke-linecap="round" fill="none" ed:parentid="112" d="M-13.5,42.1C4.9,42.1,-12.4,-42.1,13.5,-42.1" ed:tosuperid="224" stroke-linejoin="round" id="225"/><path transform="matrix(1,0,0,1,567,2873)" stroke="#696969" stroke-linecap="round" fill="none" ed:parentid="112" d="M-13.5,26.6C3,26.6,-7.8,-26.6,13.5,-26.6" ed:tosuperid="226" stroke-linejoin="round" id="227"/><path transform="matrix(1,0,0,1,567,2888)" stroke="#696969" stroke-linecap="round" fill="none" ed:parentid="112" d="M-13.5,11.1C-0.1,11.1,-0.6,-11.1,13.5,-11.1" ed:tosuperid="228" stroke-linejoin="round" id="229"/><path transform="matrix(1,0,0,1,567,2904)" stroke="#696969" stroke-linecap="round" fill="none" ed:parentid="112" d="M-13.5,-4.4C-1.7,-4.4,3,4.4,13.5,4.4" ed:tosuperid="230" stroke-linejoin="round" id="231"/><path transform="matrix(1,0,0,1,567,2919)" stroke="#696969" stroke-linecap="round" fill="none" ed:parentid="112" d="M-13.5,-19.9C1.7,-19.9,-4.9,19.9,13.5,19.9" ed:tosuperid="232" stroke-linejoin="round" id="233"/><path transform="matrix(1,0,0,1,567,2939)" stroke="#696969" stroke-linecap="round" fill="none" ed:parentid="112" d="M-13.5,-40.1C4.7,-40.1,-12,40.1,13.5,40.1" ed:tosuperid="234" stroke-linejoin="round" id="235"/><path transform="matrix(1,0,0,1,567,2964)" stroke="#696969" stroke-linecap="round" fill="none" ed:parentid="112" d="M-13.5,-65.1C5.4,-65.1,-13.5,65.1,13.5,65.1" ed:tosuperid="236" stroke-linejoin="round" id="237"/><path transform="matrix(1,0,0,1,583,3160)" stroke="#696969" stroke-linecap="round" fill="none" ed:parentid="114" d="M-13.5,32.6C3.9,32.6,-10,-32.6,13.5,-32.6" ed:tosuperid="238" stroke-linejoin="round" id="239"/><path transform="matrix(1,0,0,1,583,3176)" stroke="#696969" stroke-linecap="round" fill="none" ed:parentid="114" d="M-13.5,17.1C1.2,17.1,-3.6,-17.1,13.5,-17.1" ed:tosuperid="240" stroke-linejoin="round" id="241"/><path transform="matrix(1,0,0,1,583,3191)" stroke="#696969" stroke-linecap="round" fill="none" ed:parentid="114" d="M-13.5,1.6C-2.3,1.6,4.5,-1.6,13.5,-1.6" ed:tosuperid="242" stroke-linejoin="round" id="243"/><path transform="matrix(1,0,0,1,583,3207)" stroke="#696969" stroke-linecap="round" fill="none" ed:parentid="114" d="M-13.5,-13.9C0.5,-13.9,-2,13.9,13.5,13.9" ed:tosuperid="244" stroke-linejoin="round" id="245"/><path transform="matrix(1,0,0,1,583,3222)" stroke="#696969" stroke-linecap="round" fill="none" ed:parentid="114" d="M-13.5,-29.4C3.4,-29.4,-8.9,29.4,13.5,29.4" ed:tosuperid="246" stroke-linejoin="round" id="247"/><path transform="matrix(1,0,0,1,583,3238)" stroke="#696969" stroke-linecap="round" fill="none" ed:parentid="114" d="M-13.5,-44.9C5.1,-44.9,-12.8,44.9,13.5,44.9" ed:tosuperid="248" stroke-linejoin="round" id="249"/><path transform="matrix(1,0,0,1,583,3253)" stroke="#696969" stroke-linecap="round" fill="none" ed:parentid="114" d="M-13.5,-60.4C5.4,-60.4,-13.5,60.4,13.5,60.4" ed:tosuperid="250" stroke-linejoin="round" id="251"/><path transform="matrix(1,0,0,1,615,3533)" stroke="#696969" stroke-linecap="round" fill="none" ed:parentid="116" d="M-13.5,27.9C3.2,27.9,-8.3,-27.9,13.5,-27.9" ed:tosuperid="252" stroke-linejoin="round" id="253"/><path transform="matrix(1,0,0,1,615,3607)" stroke="#696969" stroke-linecap="round" fill="none" ed:parentid="116" d="M-13.5,-45.4C5.1,-45.4,-12.9,45.4,13.5,45.4" ed:tosuperid="254" stroke-linejoin="round" id="255"/><path transform="matrix(1,0,0,1,615,3653)" stroke="#696969" stroke-linecap="round" fill="none" ed:parentid="116" d="M-13.5,-91.9C5.4,-91.9,-13.5,91.9,13.5,91.9" ed:tosuperid="256" stroke-linejoin="round" id="257"/><path transform="matrix(1,0,0,1,734,3481)" stroke="#696969" stroke-linecap="round" fill="none" ed:parentid="252" d="M-13.5,25C2.7,25,-7.2,-25,13.5,-25" ed:tosuperid="258" stroke-linejoin="round" id="259"/><path transform="matrix(1,0,0,1,734,3531)" stroke="#696969" stroke-linecap="round" fill="none" ed:parentid="252" d="M-13.5,-25C2.7,-25,-7.2,25,13.5,25" ed:tosuperid="260" stroke-linejoin="round" id="261"/><path transform="matrix(1,0,0,1,801,3652)" stroke="#696969" stroke-linecap="round" fill="none" ed:parentid="254" d="M-13.5,0C-2.7,0,5.4,0,13.5,0" ed:tosuperid="262" stroke-linejoin="round" id="263"/><path transform="matrix(1,0,0,1,801,3668)" stroke="#696969" stroke-linecap="round" fill="none" ed:parentid="254" d="M-13.5,-15.5C0.8,-15.5,-2.8,15.5,13.5,15.5" ed:tosuperid="264" stroke-linejoin="round" id="265"/><path transform="matrix(1,0,0,1,773,3745)" stroke="#696969" stroke-linecap="round" fill="none" ed:parentid="256" d="M-13.5,0C-2.7,0,5.4,0,13.5,0" ed:tosuperid="266" stroke-linejoin="round" id="267"/><path transform="matrix(1,0,0,1,773,3761)" stroke="#696969" stroke-linecap="round" fill="none" ed:parentid="256" d="M-13.5,-15.5C0.8,-15.5,-2.8,15.5,13.5,15.5" ed:tosuperid="268" stroke-linejoin="round" id="269"/><path transform="matrix(1,0,0,1,822,58)" stroke="#696969" stroke-linecap="round" fill="none" ed:parentid="120" d="M-13.5,12.5C0.2,12.5,-1.3,-12.5,13.5,-12.5" ed:tosuperid="354" stroke-linejoin="round" id="355"/><path transform="matrix(1,0,0,1,822,83)" stroke="#696969" stroke-linecap="round" fill="none" ed:parentid="120" d="M-13.5,-12.5C0.2,-12.5,-1.3,12.5,13.5,12.5" ed:tosuperid="356" stroke-linejoin="round" id="357"/><path transform="matrix(1,0,0,1,822,127)" stroke="#696969" stroke-linecap="round" fill="none" ed:parentid="122" d="M-13.5,0C-2.7,0,5.4,0,13.5,0" ed:tosuperid="358" stroke-linejoin="round" id="359"/><path transform="matrix(1,0,0,1,861,158)" stroke="#696969" stroke-linecap="round" fill="none" ed:parentid="124" d="M-13.5,0C-2.7,0,5.4,0,13.5,0" ed:tosuperid="360" stroke-linejoin="round" id="361"/><path transform="matrix(1,0,0,1,807,203)" stroke="#696969" stroke-linecap="round" fill="none" ed:parentid="128" d="M-13.5,-4.8C-1.6,-4.8,2.8,4.8,13.5,4.8" ed:tosuperid="362" stroke-linejoin="round" id="363"/><path transform="matrix(1,0,0,1,807,261)" stroke="#696969" stroke-linecap="round" fill="none" ed:parentid="130" d="M-13.5,3C-2,3,3.8,-3,13.5,-3" ed:tosuperid="364" stroke-linejoin="round" id="365"/><path transform="matrix(1,0,0,1,807,276)" stroke="#696969" stroke-linecap="round" fill="none" ed:parentid="130" d="M-13.5,-12.5C0.2,-12.5,-1.3,12.5,13.5,12.5" ed:tosuperid="366" stroke-linejoin="round" id="367"/><path transform="matrix(1,0,0,1,807,348)" stroke="#696969" stroke-linecap="round" fill="none" ed:parentid="132" d="M-13.5,-9.5C-0.5,-9.5,0.2,9.5,13.5,9.5" ed:tosuperid="368" stroke-linejoin="round" id="369"/><path transform="matrix(1,0,0,1,833,403)" stroke="#696969" stroke-linecap="round" fill="none" ed:parentid="134" d="M-13.5,-4.8C-1.6,-4.8,2.8,4.8,13.5,4.8" ed:tosuperid="370" stroke-linejoin="round" id="371"/><path transform="matrix(1,0,0,1,807,453)" stroke="#696969" stroke-linecap="round" fill="none" ed:parentid="136" d="M-13.5,-4.8C-1.6,-4.8,2.8,4.8,13.5,4.8" ed:tosuperid="372" stroke-linejoin="round" id="373"/><path transform="matrix(1,0,0,1,807,517)" stroke="#696969" stroke-linecap="round" fill="none" ed:parentid="138" d="M-13.5,-9.5C-0.5,-9.5,0.2,9.5,13.5,9.5" ed:tosuperid="374" stroke-linejoin="round" id="375"/><path transform="matrix(1,0,0,1,807,558)" stroke="#696969" stroke-linecap="round" fill="none" ed:parentid="140" d="M-13.5,0C-2.7,0,5.4,0,13.5,0" ed:tosuperid="376" stroke-linejoin="round" id="377"/><path transform="matrix(1,0,0,1,712,643)" stroke="#696969" stroke-linecap="round" fill="none" ed:parentid="142" d="M-13.5,28C3.2,28,-8.3,-28,13.5,-28" ed:tosuperid="378" stroke-linejoin="round" id="379"/><path transform="matrix(1,0,0,1,712,668)" stroke="#696969" stroke-linecap="round" fill="none" ed:parentid="142" d="M-13.5,3C-2,3,3.8,-3,13.5,-3" ed:tosuperid="380" stroke-linejoin="round" id="381"/><path transform="matrix(1,0,0,1,712,684)" stroke="#696969" stroke-linecap="round" fill="none" ed:parentid="142" d="M-13.5,-12.5C0.2,-12.5,-1.3,12.5,13.5,12.5" ed:tosuperid="382" stroke-linejoin="round" id="383"/><path transform="matrix(1,0,0,1,712,699)" stroke="#696969" stroke-linecap="round" fill="none" ed:parentid="142" d="M-13.5,-28C3.2,-28,-8.3,28,13.5,28" ed:tosuperid="386" stroke-linejoin="round" id="387"/><path transform="matrix(1,0,0,1,807,758)" stroke="#696969" stroke-linecap="round" fill="none" ed:parentid="146" d="M-13.5,0C-2.7,0,5.4,0,13.5,0" ed:tosuperid="388" stroke-linejoin="round" id="389"/><path transform="matrix(1,0,0,1,807,802)" stroke="#696969" stroke-linecap="round" fill="none" ed:parentid="148" d="M-13.5,12.5C0.2,12.5,-1.3,-12.5,13.5,-12.5" ed:tosuperid="390" stroke-linejoin="round" id="391"/><path transform="matrix(1,0,0,1,807,827)" stroke="#696969" stroke-linecap="round" fill="none" ed:parentid="148" d="M-13.5,-12.5C0.2,-12.5,-1.3,12.5,13.5,12.5" ed:tosuperid="392" stroke-linejoin="round" id="393"/><path transform="matrix(1,0,0,1,807,884)" stroke="#696969" stroke-linecap="round" fill="none" ed:parentid="150" d="M-13.5,-4.8C-1.6,-4.8,2.8,4.8,13.5,4.8" ed:tosuperid="394" stroke-linejoin="round" id="395"/><path transform="matrix(1,0,0,1,807,920)" stroke="#696969" stroke-linecap="round" fill="none" ed:parentid="152" d="M-13.5,0C-2.7,0,5.4,0,13.5,0" ed:tosuperid="396" stroke-linejoin="round" id="397"/><path transform="matrix(1,0,0,1,820,964)" stroke="#696969" stroke-linecap="round" fill="none" ed:parentid="156" d="M-13.5,12.5C0.2,12.5,-1.3,-12.5,13.5,-12.5" ed:tosuperid="398" stroke-linejoin="round" id="399"/><path transform="matrix(1,0,0,1,820,989)" stroke="#696969" stroke-linecap="round" fill="none" ed:parentid="156" d="M-13.5,-12.5C0.2,-12.5,-1.3,12.5,13.5,12.5" ed:tosuperid="400" stroke-linejoin="round" id="401"/><path transform="matrix(1,0,0,1,781,1046)" stroke="#696969" stroke-linecap="round" fill="none" ed:parentid="158" d="M-13.5,-4.8C-1.6,-4.8,2.8,4.8,13.5,4.8" ed:tosuperid="402" stroke-linejoin="round" id="403"/><path transform="matrix(1,0,0,1,712,1090)" stroke="#696969" stroke-linecap="round" fill="none" ed:parentid="160" d="M-13.5,7.8C-0.9,7.8,1.2,-7.8,13.5,-7.8" ed:tosuperid="404" stroke-linejoin="round" id="405"/><path transform="matrix(1,0,0,1,712,1105)" stroke="#696969" stroke-linecap="round" fill="none" ed:parentid="160" d="M-13.5,-7.8C-0.9,-7.8,1.2,7.8,13.5,7.8" ed:tosuperid="406" stroke-linejoin="round" id="407"/><path transform="matrix(1,0,0,1,673,1169)" stroke="#696969" stroke-linecap="round" fill="none" ed:parentid="162" d="M-13.5,25C2.7,25,-7.2,-25,13.5,-25" ed:tosuperid="408" stroke-linejoin="round" id="409"/><path transform="matrix(1,0,0,1,673,1185)" stroke="#696969" stroke-linecap="round" fill="none" ed:parentid="162" d="M-13.5,9.5C-0.5,9.5,0.2,-9.5,13.5,-9.5" ed:tosuperid="410" stroke-linejoin="round" id="411"/><path transform="matrix(1,0,0,1,673,1219)" stroke="#696969" stroke-linecap="round" fill="none" ed:parentid="162" d="M-13.5,-25C2.7,-25,-7.2,25,13.5,25" ed:tosuperid="412" stroke-linejoin="round" id="413"/><path transform="matrix(1,0,0,1,638,1309)" stroke="#696969" stroke-linecap="round" fill="none" ed:parentid="164" d="M-13.5,7.8C-0.9,7.8,1.2,-7.8,13.5,-7.8" ed:tosuperid="414" stroke-linejoin="round" id="415"/><path transform="matrix(1,0,0,1,638,1325)" stroke="#696969" stroke-linecap="round" fill="none" ed:parentid="164" d="M-13.5,-7.8C-0.9,-7.8,1.2,7.8,13.5,7.8" ed:tosuperid="416" stroke-linejoin="round" id="417"/><path transform="matrix(1,0,0,1,651,1378)" stroke="#696969" stroke-linecap="round" fill="none" ed:parentid="166" d="M-13.5,-4.8C-1.6,-4.8,2.8,4.8,13.5,4.8" ed:tosuperid="418" stroke-linejoin="round" id="419"/><path transform="matrix(1,0,0,1,651,1428)" stroke="#696969" stroke-linecap="round" fill="none" ed:parentid="168" d="M-13.5,-4.8C-1.6,-4.8,2.8,4.8,13.5,4.8" ed:tosuperid="420" stroke-linejoin="round" id="421"/><path transform="matrix(1,0,0,1,651,1478)" stroke="#696969" stroke-linecap="round" fill="none" ed:parentid="170" d="M-13.5,-4.8C-1.6,-4.8,2.8,4.8,13.5,4.8" ed:tosuperid="422" stroke-linejoin="round" id="423"/><path transform="matrix(1,0,0,1,651,1528)" stroke="#696969" stroke-linecap="round" fill="none" ed:parentid="172" d="M-13.5,-4.8C-1.6,-4.8,2.8,4.8,13.5,4.8" ed:tosuperid="424" stroke-linejoin="round" id="425"/><path transform="matrix(1,0,0,1,651,1578)" stroke="#696969" stroke-linecap="round" fill="none" ed:parentid="174" d="M-13.5,-4.8C-1.6,-4.8,2.8,4.8,13.5,4.8" ed:tosuperid="426" stroke-linejoin="round" id="427"/><path transform="matrix(1,0,0,1,651,1642)" stroke="#696969" stroke-linecap="round" fill="none" ed:parentid="176" d="M-13.5,-9.5C-0.5,-9.5,0.2,9.5,13.5,9.5" ed:tosuperid="428" stroke-linejoin="round" id="429"/><path transform="matrix(1,0,0,1,651,1697)" stroke="#696969" stroke-linecap="round" fill="none" ed:parentid="178" d="M-13.5,-4.8C-1.6,-4.8,2.8,4.8,13.5,4.8" ed:tosuperid="430" stroke-linejoin="round" id="431"/><path transform="matrix(1,0,0,1,751,1807)" stroke="#696969" stroke-linecap="round" fill="none" ed:parentid="180" d="M-13.5,48.3C5.3,48.3,-13.2,-48.3,13.5,-48.3" ed:tosuperid="432" stroke-linejoin="round" id="433"/><path transform="matrix(1,0,0,1,872,1806)" stroke="#696969" stroke-linecap="round" fill="none" ed:parentid="182" d="M-13.5,15.5C0.8,15.5,-2.8,-15.5,13.5,-15.5" ed:tosuperid="434" stroke-linejoin="round" id="435"/><path transform="matrix(1,0,0,1,872,1821)" stroke="#696969" stroke-linecap="round" fill="none" ed:parentid="182" d="M-13.5,0C-2.7,0,5.4,0,13.5,0" ed:tosuperid="436" stroke-linejoin="round" id="437"/><path transform="matrix(1,0,0,1,872,1837)" stroke="#696969" stroke-linecap="round" fill="none" ed:parentid="182" d="M-13.5,-15.5C0.8,-15.5,-2.8,15.5,13.5,15.5" ed:tosuperid="438" stroke-linejoin="round" id="439"/><path transform="matrix(1,0,0,1,872,1897)" stroke="#696969" stroke-linecap="round" fill="none" ed:parentid="184" d="M-13.5,-4.8C-1.6,-4.8,2.8,4.8,13.5,4.8" ed:tosuperid="440" stroke-linejoin="round" id="441"/><path transform="matrix(1,0,0,1,872,1947)" stroke="#696969" stroke-linecap="round" fill="none" ed:parentid="186" d="M-13.5,-4.8C-1.6,-4.8,2.8,4.8,13.5,4.8" ed:tosuperid="442" stroke-linejoin="round" id="443"/><path transform="matrix(1,0,0,1,738,2060)" stroke="#696969" stroke-linecap="round" fill="none" ed:parentid="188" d="M-13.5,38.8C4.6,38.8,-11.7,-38.8,13.5,-38.8" ed:tosuperid="444" stroke-linejoin="round" id="445"/><path transform="matrix(1,0,0,1,738,2075)" stroke="#696969" stroke-linecap="round" fill="none" ed:parentid="188" d="M-13.5,23.3C2.4,23.3,-6.4,-23.3,13.5,-23.3" ed:tosuperid="446" stroke-linejoin="round" id="447"/><path transform="matrix(1,0,0,1,859,2083)" stroke="#696969" stroke-linecap="round" fill="none" ed:parentid="190" d="M-13.5,0C-2.7,0,5.4,0,13.5,0" ed:tosuperid="448" stroke-linejoin="round" id="449"/><path transform="matrix(1,0,0,1,859,2114)" stroke="#696969" stroke-linecap="round" fill="none" ed:parentid="192" d="M-13.5,0C-2.7,0,5.4,0,13.5,0" ed:tosuperid="450" stroke-linejoin="round" id="451"/><path transform="matrix(1,0,0,1,833,2159)" stroke="#696969" stroke-linecap="round" fill="none" ed:parentid="194" d="M-13.5,-4.8C-1.6,-4.8,2.8,4.8,13.5,4.8" ed:tosuperid="452" stroke-linejoin="round" id="453"/><path transform="matrix(1,0,0,1,859,2209)" stroke="#696969" stroke-linecap="round" fill="none" ed:parentid="196" d="M-13.5,-4.8C-1.6,-4.8,2.8,4.8,13.5,4.8" ed:tosuperid="454" stroke-linejoin="round" id="455"/><path transform="matrix(1,0,0,1,885,2267)" stroke="#696969" stroke-linecap="round" fill="none" ed:parentid="200" d="M-13.5,3C-2,3,3.8,-3,13.5,-3" ed:tosuperid="456" stroke-linejoin="round" id="457"/><path transform="matrix(1,0,0,1,885,2283)" stroke="#696969" stroke-linecap="round" fill="none" ed:parentid="200" d="M-13.5,-12.5C0.2,-12.5,-1.3,12.5,13.5,12.5" ed:tosuperid="458" stroke-linejoin="round" id="459"/><path transform="matrix(1,0,0,1,885,2340)" stroke="#696969" stroke-linecap="round" fill="none" ed:parentid="202" d="M-13.5,-4.8C-1.6,-4.8,2.8,4.8,13.5,4.8" ed:tosuperid="460" stroke-linejoin="round" id="461"/><path transform="matrix(1,0,0,1,872,2390)" stroke="#696969" stroke-linecap="round" fill="none" ed:parentid="204" d="M-13.5,-4.8C-1.6,-4.8,2.8,4.8,13.5,4.8" ed:tosuperid="462" stroke-linejoin="round" id="463"/><path transform="matrix(1,0,0,1,567,2537)" stroke="#696969" stroke-linecap="round" fill="none" ed:parentid="110" d="M-13.5,40.4C4.8,40.4,-12,-40.4,13.5,-40.4" ed:tosuperid="464" stroke-linejoin="round" id="465"/><path transform="matrix(1,0,0,1,690,2494)" stroke="#696969" stroke-linecap="round" fill="none" ed:parentid="464" d="M-13.5,3C-2,3,3.8,-3,13.5,-3" ed:tosuperid="466" stroke-linejoin="round" id="467"/><path transform="matrix(1,0,0,1,690,2519)" stroke="#696969" stroke-linecap="round" fill="none" ed:parentid="464" d="M-13.5,-22C2.1,-22,-5.9,22,13.5,22" ed:tosuperid="468" stroke-linejoin="round" id="469"/><path transform="matrix(1,0,0,1,725,2784)" stroke="#696969" stroke-linecap="round" fill="none" ed:parentid="222" d="M-13.5,0C-2.7,0,5.4,0,13.5,0" ed:tosuperid="471" stroke-linejoin="round" id="472"/><path transform="matrix(1,0,0,1,725,2815)" stroke="#696969" stroke-linecap="round" fill="none" ed:parentid="224" d="M-13.5,0C-2.7,0,5.4,0,13.5,0" ed:tosuperid="473" stroke-linejoin="round" id="474"/><path transform="matrix(1,0,0,1,699,2846)" stroke="#696969" stroke-linecap="round" fill="none" ed:parentid="226" d="M-13.5,0C-2.7,0,5.4,0,13.5,0" ed:tosuperid="475" stroke-linejoin="round" id="476"/><path transform="matrix(1,0,0,1,699,2877)" stroke="#696969" stroke-linecap="round" fill="none" ed:parentid="228" d="M-13.5,0C-2.7,0,5.4,0,13.5,0" ed:tosuperid="477" stroke-linejoin="round" id="478"/><path transform="matrix(1,0,0,1,725,2908)" stroke="#696969" stroke-linecap="round" fill="none" ed:parentid="230" d="M-13.5,0C-2.7,0,5.4,0,13.5,0" ed:tosuperid="479" stroke-linejoin="round" id="480"/><path transform="matrix(1,0,0,1,686,2984)" stroke="#696969" stroke-linecap="round" fill="none" ed:parentid="234" d="M-13.5,-4.8C-1.6,-4.8,2.8,4.8,13.5,4.8" ed:tosuperid="481" stroke-linejoin="round" id="482"/><path transform="matrix(1,0,0,1,686,3034)" stroke="#696969" stroke-linecap="round" fill="none" ed:parentid="236" d="M-13.5,-4.8C-1.6,-4.8,2.8,4.8,13.5,4.8" ed:tosuperid="483" stroke-linejoin="round" id="484"/><path transform="matrix(1,0,0,1,583,3145)" stroke="#696969" stroke-linecap="round" fill="none" ed:parentid="114" d="M-13.5,48.1C5.3,48.1,-13.2,-48.1,13.5,-48.1" ed:tosuperid="485" stroke-linejoin="round" id="486"/><path transform="matrix(1,0,0,1,715,3190)" stroke="#696969" stroke-linecap="round" fill="none" ed:parentid="242" d="M-13.5,0C-2.7,0,5.4,0,13.5,0" ed:tosuperid="487" stroke-linejoin="round" id="488"/><path transform="matrix(1,0,0,1,728,3314)" stroke="#696969" stroke-linecap="round" fill="none" ed:parentid="250" d="M-13.5,0C-2.7,0,5.4,0,13.5,0" ed:tosuperid="489" stroke-linejoin="round" id="490"/><path transform="matrix(1,0,0,1,615,3476)" stroke="#696969" stroke-linecap="round" fill="none" ed:parentid="116" d="M-13.5,85.6C5.4,85.6,-13.5,-85.6,13.5,-85.6" ed:tosuperid="491" stroke-linejoin="round" id="492"/><path transform="matrix(1,0,0,1,868,3457)" stroke="#696969" stroke-linecap="round" fill="none" ed:parentid="258" d="M-13.5,-1.8C-2.3,-1.8,4.4,1.8,13.5,1.8" ed:tosuperid="493" stroke-linejoin="round" id="494"/><path transform="matrix(1,0,0,1,868,3473)" stroke="#696969" stroke-linecap="round" fill="none" ed:parentid="258" d="M-13.5,-17.3C1.2,-17.3,-3.7,17.3,13.5,17.3" ed:tosuperid="495" stroke-linejoin="round" id="496"/><path transform="matrix(1,0,0,1,868,3557)" stroke="#696969" stroke-linecap="round" fill="none" ed:parentid="260" d="M-13.5,-1.8C-2.3,-1.8,4.4,1.8,13.5,1.8" ed:tosuperid="497" stroke-linejoin="round" id="498"/><path transform="matrix(1,0,0,1,868,3573)" stroke="#696969" stroke-linecap="round" fill="none" ed:parentid="260" d="M-13.5,-17.3C1.2,-17.3,-3.7,17.3,13.5,17.3" ed:tosuperid="499" stroke-linejoin="round" id="500"/><path transform="matrix(1,0,0,1,801,3637)" stroke="#696969" stroke-linecap="round" fill="none" ed:parentid="254" d="M-13.5,15.5C0.8,15.5,-2.8,-15.5,13.5,-15.5" ed:tosuperid="501" stroke-linejoin="round" id="502"/><path transform="matrix(1,0,0,1,773,3730)" stroke="#696969" stroke-linecap="round" fill="none" ed:parentid="256" d="M-13.5,15.5C0.8,15.5,-2.8,-15.5,13.5,-15.5" ed:tosuperid="503" stroke-linejoin="round" id="504"/><g transform="matrix(1,0,0,1,23,1870)" ed:layout="rightmap" ed:topictype="mainidea" id="101" ed:height="57" ed:width="270"><path fill="#435fbc" stroke="#435fbc" d="M4,0L266,0C268.7,0,270,1.3,270,4L270,53C270,55.7,268.7,57,266,57L4,57C1.3,57,0,55.7,0,53L0,4C0,1.3,1.3,0,4,0z" stroke-linejoin="round" stroke-width="3"/><text class="st1"><tspan style="white-space:pre" y="34.5" x="21">《图解算法-使用Python》</tspan></text></g><g transform="matrix(1,0,0,1,356,271)" ed:parentid="101" id="102" ed:height="37" ed:width="197"><path fill="#ebecf3" stroke="#ebecf3" d="M4,0L193,0C195.7,0,197,1.3,197,4L197,33C197,35.7,195.7,37,193,37L4,37C1.3,37,0,35.7,0,33L0,4C0,1.3,1.3,0,4,0z" stroke-linejoin="round"/><text class="st2"><tspan style="white-space:pre" y="23.4" x="18">第1章 进入算法的世界</tspan></text></g><g transform="matrix(1,0,0,1,356,899)" ed:parentid="101" id="104" ed:height="37" ed:width="197"><path fill="#ebecf3" stroke="#ebecf3" d="M4,0L193,0C195.7,0,197,1.3,197,4L197,33C197,35.7,195.7,37,193,37L4,37C1.3,37,0,35.7,0,33L0,4C0,1.3,1.3,0,4,0z" stroke-linejoin="round"/><text class="st2"><tspan style="white-space:pre" y="23.4" x="18">第2章 常用的数据结构</tspan></text></g><g transform="matrix(1,0,0,1,356,1471)" ed:parentid="101" id="106" ed:height="37" ed:width="149"><path fill="#ebecf3" stroke="#ebecf3" d="M4,0L145,0C147.7,0,149,1.3,149,4L149,33C149,35.7,147.7,37,145,37L4,37C1.3,37,0,35.7,0,33L0,4C0,1.3,1.3,0,4,0z" stroke-linejoin="round"/><text class="st2"><tspan style="white-space:pre" y="23.4" x="18">第3章 排序算法</tspan></text></g><g transform="matrix(1,0,0,1,356,2046)" ed:parentid="101" id="108" ed:height="37" ed:width="197"><path fill="#ebecf3" stroke="#ebecf3" d="M4,0L193,0C195.7,0,197,1.3,197,4L197,33C197,35.7,195.7,37,193,37L4,37C1.3,37,0,35.7,0,33L0,4C0,1.3,1.3,0,4,0z" stroke-linejoin="round"/><text class="st2"><tspan style="white-space:pre" y="23.4" x="18">第4章 查找与哈希算法</tspan></text></g><g transform="matrix(1,0,0,1,356,2559)" ed:parentid="101" id="110" ed:height="37" ed:width="197"><path fill="#ebecf3" stroke="#ebecf3" d="M4,0L193,0C195.7,0,197,1.3,197,4L197,33C197,35.7,195.7,37,193,37L4,37C1.3,37,0,35.7,0,33L0,4C0,1.3,1.3,0,4,0z" stroke-linejoin="round"/><text class="st2"><tspan style="white-space:pre" y="23.4" x="18">第5章 数组与链表算法</tspan></text></g><g transform="matrix(1,0,0,1,356,2881)" ed:parentid="101" id="112" ed:height="37" ed:width="197"><path fill="#ebecf3" stroke="#ebecf3" d="M4,0L193,0C195.7,0,197,1.3,197,4L197,33C197,35.7,195.7,37,193,37L4,37C1.3,37,0,35.7,0,33L0,4C0,1.3,1.3,0,4,0z" stroke-linejoin="round"/><text class="st2"><tspan style="white-space:pre" y="23.4" x="18">第6章 堆栈与队列算法</tspan></text></g><g transform="matrix(1,0,0,1,356,3174)" ed:parentid="101" id="114" ed:height="37" ed:width="213"><path fill="#ebecf3" stroke="#ebecf3" d="M4,0L209,0C211.7,0,213,1.3,213,4L213,33C213,35.7,211.7,37,209,37L4,37C1.3,37,0,35.7,0,33L0,4C0,1.3,1.3,0,4,0z" stroke-linejoin="round"/><text class="st2"><tspan style="white-space:pre" y="23.4" x="18">第7章 树形结构及其算法</tspan></text></g><g transform="matrix(1,0,0,1,356,3543)" ed:parentid="101" id="116" ed:height="37" ed:width="245"><path fill="#ebecf3" stroke="#ebecf3" d="M4,0L241,0C243.7,0,245,1.3,245,4L245,33C245,35.7,243.7,37,241,37L4,37C1.3,37,0,35.7,0,33L0,4C0,1.3,1.3,0,4,0z" stroke-linejoin="round"/><text class="st2"><tspan style="white-space:pre" y="23.4" x="18">第8章 图的数据结构及其算法</tspan></text></g><g transform="matrix(1,0,0,1,580,77)" ed:parentid="102" id="118" ed:height="24.5" ed:width="157"><path stroke="#696969" fill="none" d="M0,24.5L157,24.5" stroke-linejoin="round"/><text class="st3"><tspan style="white-space:pre" y="16.1" x="8">1.1.生活中到处都是算法</tspan></text></g><g transform="matrix(1,0,0,1,764,46)" ed:parentid="118" id="120" ed:height="24.5" ed:width="44"><path stroke="#696969" fill="none" d="M0,24.5L44,24.5" stroke-linejoin="round"/><text class="st3"><tspan style="white-space:pre" y="16.1" x="8">定义</tspan></text></g><g transform="matrix(1,0,0,1,764,102)" ed:parentid="118" id="122" ed:height="24.5" ed:width="44"><path stroke="#696969" fill="none" d="M0,24.5L44,24.5" stroke-linejoin="round"/><text class="st3"><tspan style="white-space:pre" y="16.1" x="8">条件</tspan></text></g><g transform="matrix(1,0,0,1,764,133)" ed:parentid="118" id="124" ed:height="24.5" ed:width="83"><path stroke="#696969" fill="none" d="M0,24.5L83,24.5" stroke-linejoin="round"/><text class="st3"><tspan style="white-space:pre" y="16.1" x="8">时间复杂度</tspan></text></g><g transform="matrix(1,0,0,1,580,349)" ed:parentid="102" id="126" ed:height="24.5" ed:width="118"><path stroke="#696969" fill="none" d="M0,24.5L118,24.5" stroke-linejoin="round"/><text class="st3"><tspan style="white-space:pre" y="16.1" x="8">1.2.常见算法简介</tspan></text></g><g transform="matrix(1,0,0,1,725,174)" ed:parentid="126" id="128" ed:height="24.5" ed:width="68"><path stroke="#696969" fill="none" d="M0,24.5L68,24.5" stroke-linejoin="round"/><text class="st3"><tspan style="white-space:pre" y="16.1" x="8">1.分治法</tspan></text></g><g transform="matrix(1,0,0,1,725,239)" ed:parentid="126" id="130" ed:height="24.5" ed:width="68"><path stroke="#696969" fill="none" d="M0,24.5L68,24.5" stroke-linejoin="round"/><text class="st3"><tspan style="white-space:pre" y="16.1" x="8">2.递归法</tspan></text></g><g transform="matrix(1,0,0,1,725,314)" ed:parentid="126" id="132" ed:height="24.5" ed:width="68"><path stroke="#696969" fill="none" d="M0,24.5L68,24.5" stroke-linejoin="round"/><text class="st3"><tspan style="white-space:pre" y="16.1" x="8">3.贪心法</tspan></text></g><g transform="matrix(1,0,0,1,725,374)" ed:parentid="126" id="134" ed:height="24.5" ed:width="94"><path stroke="#696969" fill="none" d="M0,24.5L94,24.5" stroke-linejoin="round"/><text class="st3"><tspan style="white-space:pre" y="16.1" x="8">4.动态规划法</tspan></text></g><g transform="matrix(1,0,0,1,725,424)" ed:parentid="126" id="136" ed:height="24.5" ed:width="68"><path stroke="#696969" fill="none" d="M0,24.5L68,24.5" stroke-linejoin="round"/><text class="st3"><tspan style="white-space:pre" y="16.1" x="8">5.迭代法</tspan></text></g><g transform="matrix(1,0,0,1,725,483)" ed:parentid="126" id="138" ed:height="24.5" ed:width="68"><path stroke="#696969" fill="none" d="M0,24.5L68,24.5" stroke-linejoin="round"/><text class="st3"><tspan style="white-space:pre" y="16.1" x="8">6.枚举法</tspan></text></g><g transform="matrix(1,0,0,1,725,533)" ed:parentid="126" id="140" ed:height="24.5" ed:width="68"><path stroke="#696969" fill="none" d="M0,24.5L68,24.5" stroke-linejoin="round"/><text class="st3"><tspan style="white-space:pre" y="16.1" x="8">7.回溯法</tspan></text></g><g transform="matrix(1,0,0,1,580,647)" ed:parentid="104" id="142" ed:height="24.5" ed:width="118"><path stroke="#696969" fill="none" d="M0,24.5L118,24.5" stroke-linejoin="round"/><text class="st3"><tspan style="white-space:pre" y="16.1" x="8">2.1.认识数据结构</tspan></text></g><g transform="matrix(1,0,0,1,580,815)" ed:parentid="104" id="144" ed:height="24.5" ed:width="131"><path stroke="#696969" fill="none" d="M0,24.5L131,24.5" stroke-linejoin="round"/><text class="st3"><tspan style="white-space:pre" y="16.1" x="8">2.2.数据结构的种类</tspan></text></g><g transform="matrix(1,0,0,1,738,734)" ed:parentid="144" id="146" ed:height="24.5" ed:width="55"><path stroke="#696969" fill="none" d="M0,24.5L55,24.5" stroke-linejoin="round"/><text class="st3"><tspan style="white-space:pre" y="16.1" x="8">1.数组</tspan></text></g><g transform="matrix(1,0,0,1,738,790)" ed:parentid="144" id="148" ed:height="24.5" ed:width="55"><path stroke="#696969" fill="none" d="M0,24.5L55,24.5" stroke-linejoin="round"/><text class="st3"><tspan style="white-space:pre" y="16.1" x="8">2.链表</tspan></text></g><g transform="matrix(1,0,0,1,738,855)" ed:parentid="144" id="150" ed:height="24.5" ed:width="55"><path stroke="#696969" fill="none" d="M0,24.5L55,24.5" stroke-linejoin="round"/><text class="st3"><tspan style="white-space:pre" y="16.1" x="8">3.堆栈</tspan></text></g><g transform="matrix(1,0,0,1,738,896)" ed:parentid="144" id="152" ed:height="24.5" ed:width="55"><path stroke="#696969" fill="none" d="M0,24.5L55,24.5" stroke-linejoin="round"/><text class="st3"><tspan style="white-space:pre" y="16.1" x="8">4.队列</tspan></text></g><g transform="matrix(1,0,0,1,580,977)" ed:parentid="104" id="154" ed:height="24.5" ed:width="92"><path stroke="#696969" fill="none" d="M0,24.5L92,24.5" stroke-linejoin="round"/><text class="st3"><tspan style="white-space:pre" y="16.1" x="8">2.3.树形结构</tspan></text></g><g transform="matrix(1,0,0,1,699,952)" ed:parentid="154" id="156" ed:height="24.5" ed:width="107"><path stroke="#696969" fill="none" d="M0,24.5L107,24.5" stroke-linejoin="round"/><text class="st3"><tspan style="white-space:pre" y="16.1" x="8">1.树的基本观念</tspan></text></g><g transform="matrix(1,0,0,1,699,1017)" ed:parentid="154" id="158" ed:height="24.5" ed:width="68"><path stroke="#696969" fill="none" d="M0,24.5L68,24.5" stroke-linejoin="round"/><text class="st3"><tspan style="white-space:pre" y="16.1" x="8">2.二叉树</tspan></text></g><g transform="matrix(1,0,0,1,580,1073)" ed:parentid="104" id="160" ed:height="24.5" ed:width="118"><path stroke="#696969" fill="none" d="M0,24.5L118,24.5" stroke-linejoin="round"/><text class="st3"><tspan style="white-space:pre" y="16.1" x="8">2.4.图形结构简介</tspan></text></g><g transform="matrix(1,0,0,1,580,1170)" ed:parentid="104" id="162" ed:height="24.5" ed:width="79"><path stroke="#696969" fill="none" d="M0,24.5L79,24.5" stroke-linejoin="round"/><text class="st3"><tspan style="white-space:pre" y="16.1" x="8">2.5.哈希表</tspan></text></g><g transform="matrix(1,0,0,1,532,1293)" ed:parentid="106" id="164" ed:height="24.5" ed:width="92"><path stroke="#696969" fill="none" d="M0,24.5L92,24.5" stroke-linejoin="round"/><text class="st3"><tspan style="white-space:pre" y="16.1" x="8">3.1.认识排序</tspan></text></g><g transform="matrix(1,0,0,1,532,1349)" ed:parentid="106" id="166" ed:height="24.5" ed:width="105"><path stroke="#696969" fill="none" d="M0,24.5L105,24.5" stroke-linejoin="round"/><text class="st3"><tspan style="white-space:pre" y="16.1" x="8">3.2.冒泡排序法</tspan></text></g><g transform="matrix(1,0,0,1,532,1399)" ed:parentid="106" id="168" ed:height="24.5" ed:width="105"><path stroke="#696969" fill="none" d="M0,24.5L105,24.5" stroke-linejoin="round"/><text class="st3"><tspan style="white-space:pre" y="16.1" x="8">3.3.选择排序法</tspan></text></g><g transform="matrix(1,0,0,1,532,1449)" ed:parentid="106" id="170" ed:height="24.5" ed:width="105"><path stroke="#696969" fill="none" d="M0,24.5L105,24.5" stroke-linejoin="round"/><text class="st3"><tspan style="white-space:pre" y="16.1" x="8">3.4.插入排序法</tspan></text></g><g transform="matrix(1,0,0,1,532,1499)" ed:parentid="106" id="172" ed:height="24.5" ed:width="105"><path stroke="#696969" fill="none" d="M0,24.5L105,24.5" stroke-linejoin="round"/><text class="st3"><tspan style="white-space:pre" y="16.1" x="8">3.5.希尔排序法</tspan></text></g><g transform="matrix(1,0,0,1,532,1549)" ed:parentid="106" id="174" ed:height="24.5" ed:width="105"><path stroke="#696969" fill="none" d="M0,24.5L105,24.5" stroke-linejoin="round"/><text class="st3"><tspan style="white-space:pre" y="16.1" x="8">3.6.合并排序法</tspan></text></g><g transform="matrix(1,0,0,1,532,1608)" ed:parentid="106" id="176" ed:height="24.5" ed:width="105"><path stroke="#696969" fill="none" d="M0,24.5L105,24.5" stroke-linejoin="round"/><text class="st3"><tspan style="white-space:pre" y="16.1" x="8">3.7.快速排序法</tspan></text></g><g transform="matrix(1,0,0,1,532,1668)" ed:parentid="106" id="178" ed:height="24.5" ed:width="105"><path stroke="#696969" fill="none" d="M0,24.5L105,24.5" stroke-linejoin="round"/><text class="st3"><tspan style="white-space:pre" y="16.1" x="8">3.8.基数排序法</tspan></text></g><g transform="matrix(1,0,0,1,580,1831)" ed:parentid="108" id="180" ed:height="24.5" ed:width="157"><path stroke="#696969" fill="none" d="M0,24.5L157,24.5" stroke-linejoin="round"/><text class="st3"><tspan style="white-space:pre" y="16.1" x="8">4.1.常见查找算法的介绍</tspan></text></g><g transform="matrix(1,0,0,1,764,1797)" ed:parentid="180" id="182" ed:height="24.5" ed:width="94"><path stroke="#696969" fill="none" d="M0,24.5L94,24.5" stroke-linejoin="round"/><text class="st3"><tspan style="white-space:pre" y="16.1" x="8">1.顺序查找法</tspan></text></g><g transform="matrix(1,0,0,1,764,1868)" ed:parentid="180" id="184" ed:height="24.5" ed:width="94"><path stroke="#696969" fill="none" d="M0,24.5L94,24.5" stroke-linejoin="round"/><text class="st3"><tspan style="white-space:pre" y="16.1" x="8">2.二分查找法</tspan></text></g><g transform="matrix(1,0,0,1,764,1918)" ed:parentid="180" id="186" ed:height="24.5" ed:width="94"><path stroke="#696969" fill="none" d="M0,24.5L94,24.5" stroke-linejoin="round"/><text class="st3"><tspan style="white-space:pre" y="16.1" x="8">3.插值查找法</tspan></text></g><g transform="matrix(1,0,0,1,580,2074)" ed:parentid="108" id="188" ed:height="24.5" ed:width="144"><path stroke="#696969" fill="none" d="M0,24.5L144,24.5" stroke-linejoin="round"/><text class="st3"><tspan style="white-space:pre" y="16.1" x="8">4.2.常见的哈希法简介</tspan></text></g><g transform="matrix(1,0,0,1,751,2059)" ed:parentid="188" id="190" ed:height="24.5" ed:width="94"><path stroke="#696969" fill="none" d="M0,24.5L94,24.5" stroke-linejoin="round"/><text class="st3"><tspan style="white-space:pre" y="16.1" x="8">1.除留余数法</tspan></text></g><g transform="matrix(1,0,0,1,751,2090)" ed:parentid="188" id="192" ed:height="24.5" ed:width="94"><path stroke="#696969" fill="none" d="M0,24.5L94,24.5" stroke-linejoin="round"/><text class="st3"><tspan style="white-space:pre" y="16.1" x="8">2.平方取中法</tspan></text></g><g transform="matrix(1,0,0,1,751,2130)" ed:parentid="188" id="194" ed:height="24.5" ed:width="68"><path stroke="#696969" fill="none" d="M0,24.5L68,24.5" stroke-linejoin="round"/><text class="st3"><tspan style="white-space:pre" y="16.1" x="8">3.折叠法</tspan></text></g><g transform="matrix(1,0,0,1,751,2180)" ed:parentid="188" id="196" ed:height="24.5" ed:width="94"><path stroke="#696969" fill="none" d="M0,24.5L94,24.5" stroke-linejoin="round"/><text class="st3"><tspan style="white-space:pre" y="16.1" x="8">4.数字分析法</tspan></text></g><g transform="matrix(1,0,0,1,580,2296)" ed:parentid="108" id="198" ed:height="24.5" ed:width="170"><path stroke="#696969" fill="none" d="M0,24.5L170,24.5" stroke-linejoin="round"/><text class="st3"><tspan style="white-space:pre" y="16.1" x="8">4.3.碰撞与溢出问题的处理</tspan></text></g><g transform="matrix(1,0,0,1,777,2246)" ed:parentid="198" id="200" ed:height="24.5" ed:width="94"><path stroke="#696969" fill="none" d="M0,24.5L94,24.5" stroke-linejoin="round"/><text class="st3"><tspan style="white-space:pre" y="16.1" x="8">1.线性探测法</tspan></text></g><g transform="matrix(1,0,0,1,777,2311)" ed:parentid="198" id="202" ed:height="24.5" ed:width="94"><path stroke="#696969" fill="none" d="M0,24.5L94,24.5" stroke-linejoin="round"/><text class="st3"><tspan style="white-space:pre" y="16.1" x="8">2.平方探测法</tspan></text></g><g transform="matrix(1,0,0,1,777,2361)" ed:parentid="198" id="204" ed:height="24.5" ed:width="81"><path stroke="#696969" fill="none" d="M0,24.5L81,24.5" stroke-linejoin="round"/><text class="st3"><tspan style="white-space:pre" y="16.1" x="8">3.再哈希法</tspan></text></g><g transform="matrix(1,0,0,1,580,2578)" ed:parentid="110" id="206" ed:height="24.5" ed:width="66"><path stroke="#696969" fill="none" d="M0,24.5L66,24.5" stroke-linejoin="round"/><text class="st3"><tspan style="white-space:pre" y="16.1" x="8">5.1.矩阵</tspan></text></g><g transform="matrix(1,0,0,1,673,2547)" ed:parentid="206" id="208" ed:height="24.5" ed:width="81"><path stroke="#696969" fill="none" d="M0,24.5L81,24.5" stroke-linejoin="round"/><text class="st3"><tspan style="white-space:pre" y="16.1" x="8">1.矩阵相加</tspan></text></g><g transform="matrix(1,0,0,1,673,2578)" ed:parentid="206" id="210" ed:height="24.5" ed:width="81"><path stroke="#696969" fill="none" d="M0,24.5L81,24.5" stroke-linejoin="round"/><text class="st3"><tspan style="white-space:pre" y="16.1" x="8">2.矩阵相乘</tspan></text></g><g transform="matrix(1,0,0,1,673,2609)" ed:parentid="206" id="212" ed:height="24.5" ed:width="81"><path stroke="#696969" fill="none" d="M0,24.5L81,24.5" stroke-linejoin="round"/><text class="st3"><tspan style="white-space:pre" y="16.1" x="8">3.转置矩阵</tspan></text></g><g transform="matrix(1,0,0,1,580,2671)" ed:parentid="110" id="214" ed:height="24.5" ed:width="118"><path stroke="#696969" fill="none" d="M0,24.5L118,24.5" stroke-linejoin="round"/><text class="st3"><tspan style="white-space:pre" y="16.1" x="8">5.2.建立单向链表</tspan></text></g><g transform="matrix(1,0,0,1,725,2640)" ed:parentid="214" id="216" ed:height="24.5" ed:width="81"><path stroke="#696969" fill="none" d="M0,24.5L81,24.5" stroke-linejoin="round"/><text class="st3"><tspan style="white-space:pre" y="16.1" x="8">1.连接功能</tspan></text></g><g transform="matrix(1,0,0,1,725,2671)" ed:parentid="214" id="218" ed:height="24.5" ed:width="81"><path stroke="#696969" fill="none" d="M0,24.5L81,24.5" stroke-linejoin="round"/><text class="st3"><tspan style="white-space:pre" y="16.1" x="8">2.节点删除</tspan></text></g><g transform="matrix(1,0,0,1,725,2702)" ed:parentid="214" id="220" ed:height="24.5" ed:width="55"><path stroke="#696969" fill="none" d="M0,24.5L55,24.5" stroke-linejoin="round"/><text class="st3"><tspan style="white-space:pre" y="16.1" x="8">3.反转</tspan></text></g><g transform="matrix(1,0,0,1,580,2760)" ed:parentid="112" id="222" ed:height="24.5" ed:width="131"><path stroke="#696969" fill="none" d="M0,24.5L131,24.5" stroke-linejoin="round"/><text class="st3"><tspan style="white-space:pre" y="16.1" x="8">6.1.用数组实现堆栈</tspan></text></g><g transform="matrix(1,0,0,1,580,2791)" ed:parentid="112" id="224" ed:height="24.5" ed:width="131"><path stroke="#696969" fill="none" d="M0,24.5L131,24.5" stroke-linejoin="round"/><text class="st3"><tspan style="white-space:pre" y="16.1" x="8">6.2.用链表实现堆栈</tspan></text></g><g transform="matrix(1,0,0,1,580,2822)" ed:parentid="112" id="226" ed:height="24.5" ed:width="105"><path stroke="#696969" fill="none" d="M0,24.5L105,24.5" stroke-linejoin="round"/><text class="st3"><tspan style="white-space:pre" y="16.1" x="8">6.3.汉诺塔问题</tspan></text></g><g transform="matrix(1,0,0,1,580,2853)" ed:parentid="112" id="228" ed:height="24.5" ed:width="105"><path stroke="#696969" fill="none" d="M0,24.5L105,24.5" stroke-linejoin="round"/><text class="st3"><tspan style="white-space:pre" y="16.1" x="8">6.4.八皇后问题</tspan></text></g><g transform="matrix(1,0,0,1,580,2884)" ed:parentid="112" id="230" ed:height="24.5" ed:width="131"><path stroke="#696969" fill="none" d="M0,24.5L131,24.5" stroke-linejoin="round"/><text class="st3"><tspan style="white-space:pre" y="16.1" x="8">6.5.用数组实现队列</tspan></text></g><g transform="matrix(1,0,0,1,580,2915)" ed:parentid="112" id="232" ed:height="24.5" ed:width="131"><path stroke="#696969" fill="none" d="M0,24.5L131,24.5" stroke-linejoin="round"/><text class="st3"><tspan style="white-space:pre" y="16.1" x="8">6.6.用链表实现队列</tspan></text></g><g transform="matrix(1,0,0,1,580,2955)" ed:parentid="112" id="234" ed:height="24.5" ed:width="92"><path stroke="#696969" fill="none" d="M0,24.5L92,24.5" stroke-linejoin="round"/><text class="st3"><tspan style="white-space:pre" y="16.1" x="8">6.7.双向队列</tspan></text></g><g transform="matrix(1,0,0,1,580,3005)" ed:parentid="112" id="236" ed:height="24.5" ed:width="92"><path stroke="#696969" fill="none" d="M0,24.5L92,24.5" stroke-linejoin="round"/><text class="st3"><tspan style="white-space:pre" y="16.1" x="8">6.8.优先队列</tspan></text></g><g transform="matrix(1,0,0,1,596,3103)" ed:parentid="114" id="238" ed:height="24.5" ed:width="144"><path stroke="#696969" fill="none" d="M0,24.5L144,24.5" stroke-linejoin="round"/><text class="st3"><tspan style="white-space:pre" y="16.1" x="8">7.1.用数组实现二叉树</tspan></text></g><g transform="matrix(1,0,0,1,596,3134)" ed:parentid="114" id="240" ed:height="24.5" ed:width="144"><path stroke="#696969" fill="none" d="M0,24.5L144,24.5" stroke-linejoin="round"/><text class="st3"><tspan style="white-space:pre" y="16.1" x="8">7.2.用链表实现二叉树</tspan></text></g><g transform="matrix(1,0,0,1,596,3165)" ed:parentid="114" id="242" ed:height="24.5" ed:width="105"><path stroke="#696969" fill="none" d="M0,24.5L105,24.5" stroke-linejoin="round"/><text class="st3"><tspan style="white-space:pre" y="16.1" x="8">7.3.二叉树遍历</tspan></text></g><g transform="matrix(1,0,0,1,596,3196)" ed:parentid="114" id="244" ed:height="24.5" ed:width="144"><path stroke="#696969" fill="none" d="M0,24.5L144,24.5" stroke-linejoin="round"/><text class="st3"><tspan style="white-space:pre" y="16.1" x="8">7.4.二叉树节点的查找</tspan></text></g><g transform="matrix(1,0,0,1,596,3227)" ed:parentid="114" id="246" ed:height="24.5" ed:width="144"><path stroke="#696969" fill="none" d="M0,24.5L144,24.5" stroke-linejoin="round"/><text class="st3"><tspan style="white-space:pre" y="16.1" x="8">7.5.二叉树节点的插入</tspan></text></g><g transform="matrix(1,0,0,1,596,3258)" ed:parentid="114" id="248" ed:height="24.5" ed:width="144"><path stroke="#696969" fill="none" d="M0,24.5L144,24.5" stroke-linejoin="round"/><text class="st3"><tspan style="white-space:pre" y="16.1" x="8">7.6.二叉树节点的删除</tspan></text></g><g transform="matrix(1,0,0,1,596,3289)" ed:parentid="114" id="250" ed:height="24.5" ed:width="118"><path stroke="#696969" fill="none" d="M0,24.5L118,24.5" stroke-linejoin="round"/><text class="st3"><tspan style="white-space:pre" y="16.1" x="8">7.7.堆积树排序法</tspan></text></g><g transform="matrix(1,0,0,1,628,3481)" ed:parentid="116" id="252" ed:height="24.5" ed:width="92"><path stroke="#696969" fill="none" d="M0,24.5L92,24.5" stroke-linejoin="round"/><text class="st3"><tspan style="white-space:pre" y="16.1" x="8">8.1.图的遍历</tspan></text></g><g transform="matrix(1,0,0,1,628,3628)" ed:parentid="116" id="254" ed:height="24.5" ed:width="159"><path stroke="#696969" fill="none" d="M0,24.5L159,24.5" stroke-linejoin="round"/><text class="st3"><tspan style="white-space:pre" y="16.1" x="8">8.2.最小生成树（MST）</tspan></text></g><g transform="matrix(1,0,0,1,628,3721)" ed:parentid="116" id="256" ed:height="24.5" ed:width="131"><path stroke="#696969" fill="none" d="M0,24.5L131,24.5" stroke-linejoin="round"/><text class="st3"><tspan style="white-space:pre" y="16.1" x="8">8.3.图的最短路径法</tspan></text></g><g transform="matrix(1,0,0,1,747,3431)" ed:parentid="252" id="258" ed:height="24.5" ed:width="107"><path stroke="#696969" fill="none" d="M0,24.5L107,24.5" stroke-linejoin="round"/><text class="st3"><tspan style="white-space:pre" y="16.1" x="8">1.深度优先遍历</tspan></text></g><g transform="matrix(1,0,0,1,747,3531)" ed:parentid="252" id="260" ed:height="24.5" ed:width="107"><path stroke="#696969" fill="none" d="M0,24.5L107,24.5" stroke-linejoin="round"/><text class="st3"><tspan style="white-space:pre" y="16.1" x="8">2.广度优先遍历</tspan></text></g><g transform="matrix(1,0,0,1,814,3628)" ed:parentid="254" id="262" ed:height="24.5" ed:width="83"><path stroke="#696969" fill="none" d="M0,24.5L83,24.5" stroke-linejoin="round"/><text class="st3"><tspan style="white-space:pre" y="16.1" x="8">1.Prim算法</tspan></text></g><g transform="matrix(1,0,0,1,814,3659)" ed:parentid="254" id="264" ed:height="24.5" ed:width="99"><path stroke="#696969" fill="none" d="M0,24.5L99,24.5" stroke-linejoin="round"/><text class="st3"><tspan style="white-space:pre" y="16.1" x="8">2.Kruskal算法</tspan></text></g><g transform="matrix(1,0,0,1,786,3721)" ed:parentid="256" id="266" ed:height="24.5" ed:width="155"><path stroke="#696969" fill="none" d="M0,24.5L155,24.5" stroke-linejoin="round"/><text class="st3"><tspan style="white-space:pre" y="16.1" x="8">1.Dijkstra算法与A*算法</tspan></text></g><g transform="matrix(1,0,0,1,786,3752)" ed:parentid="256" id="268" ed:height="24.5" ed:width="88"><path stroke="#696969" fill="none" d="M0,24.5L88,24.5" stroke-linejoin="round"/><text class="st3"><tspan style="white-space:pre" y="16.1" x="8">2.Floyd算法</tspan></text></g><g transform="matrix(1,0,0,1,835,21)" ed:parentid="120" id="354" ed:height="24.5" ed:width="278"><path stroke="#696969" fill="none" d="M0,24.5L278,24.5" stroke-linejoin="round"/><text class="st3"><tspan style="white-space:pre" y="16.1" x="8">韦氏词典：在有限步骤内解决数学问题的程序</tspan></text></g><g transform="matrix(1,0,0,1,835,52)" ed:parentid="120" id="356" ed:height="43.5" ed:width="514"><path stroke="#696969" fill="none" d="M0,43.5L514,43.5" stroke-linejoin="round"/><text class="st3"><tspan style="white-space:pre" y="16.1" x="8">计算机领域：为了解决某项工作或某个问题，所需要有限数量的机械性或重复性指令与</tspan><tspan style="white-space:pre" y="35.1" x="8">计算步骤</tspan></text></g><g transform="matrix(1,0,0,1,835,102)" ed:parentid="122" id="358" ed:height="24.5" ed:width="273"><path stroke="#696969" fill="none" d="M0,24.5L273,24.5" stroke-linejoin="round"/><text class="st3"><tspan style="white-space:pre" y="16.1" x="8">5个：输入、输出、明确性、有限性、有效性</tspan></text></g><g transform="matrix(1,0,0,1,874,133)" ed:parentid="124" id="360" ed:height="24.5" ed:width="304"><path stroke="#696969" fill="none" d="M0,24.5L304,24.5" stroke-linejoin="round"/><text class="st3"><tspan style="white-space:pre" y="16.1" x="8">一种“估算”的方法来衡量程序或算法的运行时间</tspan></text></g><g transform="matrix(1,0,0,1,820,164)" ed:parentid="128" id="362" ed:height="43.5" ed:width="514"><path stroke="#696969" fill="none" d="M0,43.5L514,43.5" stroke-linejoin="round"/><text class="st3"><tspan style="white-space:pre" y="16.1" x="8">核心思想是将一个难以解决的大问题依照相同的概念，分割成两个或更多地子问题，以</tspan><tspan style="white-space:pre" y="35.1" x="8">便各个击破</tspan></text></g><g transform="matrix(1,0,0,1,820,214)" ed:parentid="130" id="364" ed:height="43.5" ed:width="514"><path stroke="#696969" fill="none" d="M0,43.5L514,43.5" stroke-linejoin="round"/><text class="st3"><tspan style="white-space:pre" y="16.1" x="8">和分治法很像一对孪生兄弟，都是将一个复杂的算法问题进行分解，让规模越来越小，</tspan><tspan style="white-space:pre" y="35.1" x="8">最终使子问题容易求解</tspan></text></g><g transform="matrix(1,0,0,1,820,264)" ed:parentid="130" id="366" ed:height="24.5" ed:width="455"><path stroke="#696969" fill="none" d="M0,24.5L455,24.5" stroke-linejoin="round"/><text class="st3"><tspan style="white-space:pre" y="16.1" x="8">2个条件：一个可以反复执行的递归过程；一个可以离开递归执行过程的出口</tspan></text></g><g transform="matrix(1,0,0,1,820,295)" ed:parentid="132" id="368" ed:height="62.5" ed:width="514"><path stroke="#696969" fill="none" d="M0,62.5L514,62.5" stroke-linejoin="round"/><text class="st3"><tspan style="white-space:pre" y="16.1" x="8">从某个起点开始，在每一个解决问题步骤中使用贪心原则，即采取在当前状态下最有利</tspan><tspan style="white-space:pre" y="35.1" x="8">或最优化的选择，不断的改进该答案，持续在每一步骤中选择最佳的方法，并且逐步逼</tspan><tspan style="white-space:pre" y="54.1" x="8">近给定的目标</tspan></text></g><g transform="matrix(1,0,0,1,846,364)" ed:parentid="134" id="370" ed:height="43.5" ed:width="514"><path stroke="#696969" fill="none" d="M0,43.5L514,43.5" stroke-linejoin="round"/><text class="st3"><tspan style="white-space:pre" y="16.1" x="8">如果一个问题答案与子问题相关的话，就能将大问题拆解成各个小问题，其中与分治法</tspan><tspan style="white-space:pre" y="35.1" x="8">最大不同的地方是可以让每一个子问题的答案存储起来，以供下次求解时直接取用</tspan></text></g><g transform="matrix(1,0,0,1,820,414)" ed:parentid="136" id="372" ed:height="43.5" ed:width="514"><path stroke="#696969" fill="none" d="M0,43.5L514,43.5" stroke-linejoin="round"/><text class="st3"><tspan style="white-space:pre" y="16.1" x="8">无法使用公式一次求解，而需要使用迭代，例如用循环去重复执行程序代码的某些部分</tspan><tspan style="white-space:pre" y="35.1" x="8">来得到答案</tspan></text></g><g transform="matrix(1,0,0,1,820,464)" ed:parentid="138" id="374" ed:height="62.5" ed:width="514"><path stroke="#696969" fill="none" d="M0,62.5L514,62.5" stroke-linejoin="round"/><text class="st3"><tspan style="white-space:pre" y="16.1" x="8">核心思想是列举所有的可能。根据问题要求，逐一列举问题的解答，或者为了便于解决</tspan><tspan style="white-space:pre" y="35.1" x="8">问题，把问题分为不重复、不遗漏的有限种情况，逐一列举各种情况，并加以解决，最</tspan><tspan style="white-space:pre" y="54.1" x="8">终达到解决整个问题的目的</tspan></text></g><g transform="matrix(1,0,0,1,820,533)" ed:parentid="140" id="376" ed:height="24.5" ed:width="460"><path stroke="#696969" fill="none" d="M0,24.5L460,24.5" stroke-linejoin="round"/><text class="st3"><tspan style="white-space:pre" y="16.1" x="8">一种可以找出所有（或一部分）解得一般性算法，同时避免枚举不正确的数值</tspan></text></g><g transform="matrix(1,0,0,1,725,591)" ed:parentid="142" id="378" ed:height="24.5" ed:width="369"><path stroke="#696969" fill="none" d="M0,24.5L369,24.5" stroke-linejoin="round"/><text class="st3"><tspan style="white-space:pre" y="16.1" x="8">数据：指的是一种未经处理的原始文字、数字、符号或图形等</tspan></text></g><g transform="matrix(1,0,0,1,725,622)" ed:parentid="142" id="380" ed:height="43.5" ed:width="514"><path stroke="#696969" fill="none" d="M0,43.5L514,43.5" stroke-linejoin="round"/><text class="st3"><tspan style="white-space:pre" y="16.1" x="8">信息：利用大量的数据，经过有系统的整理、分析、筛选处理而提炼出来的，而且具有</tspan><tspan style="white-space:pre" y="35.1" x="8">参考价格以及提供决策依据的文字、数字、符号或图表</tspan></text></g><g transform="matrix(1,0,0,1,725,672)" ed:parentid="142" id="382" ed:height="24.5" ed:width="369"><path stroke="#696969" fill="none" d="M0,24.5L369,24.5" stroke-linejoin="round"/><text class="st3"><tspan style="white-space:pre" y="16.1" x="8">数据结构主要表示数据在计算机内存中所存储的位置及其模式</tspan></text></g><g transform="matrix(1,0,0,1,725,703)" ed:parentid="142" id="386" ed:height="24.5" ed:width="408"><path stroke="#696969" fill="none" d="M0,24.5L408,24.5" stroke-linejoin="round"/><text class="st3"><tspan style="white-space:pre" y="16.1" x="8">通常分为以下几类：基本数据类型、结构化数据类型、抽象数据类型</tspan></text></g><g transform="matrix(1,0,0,1,820,734)" ed:parentid="146" id="388" ed:height="24.5" ed:width="460"><path stroke="#696969" fill="none" d="M0,24.5L460,24.5" stroke-linejoin="round"/><text class="st3"><tspan style="white-space:pre" y="16.1" x="8">一排紧密相邻的可数内存，可提供一个能够直接访问单一数据内容的计算方法</tspan></text></g><g transform="matrix(1,0,0,1,820,765)" ed:parentid="148" id="390" ed:height="24.5" ed:width="356"><path stroke="#696969" fill="none" d="M0,24.5L356,24.5" stroke-linejoin="round"/><text class="st3"><tspan style="white-space:pre" y="16.1" x="8">由许多相同数据类型的数据项按特定顺序排列而成的线性表</tspan></text></g><g transform="matrix(1,0,0,1,820,796)" ed:parentid="148" id="392" ed:height="43.5" ed:width="514"><path stroke="#696969" fill="none" d="M0,43.5L514,43.5" stroke-linejoin="round"/><text class="st3"><tspan style="white-space:pre" y="16.1" x="8">特点是各个数据项在计算机内存中的位置是不连续且随机存放的，优点是数据的插入或</tspan><tspan style="white-space:pre" y="35.1" x="8">删除都相当方便</tspan></text></g><g transform="matrix(1,0,0,1,820,846)" ed:parentid="150" id="394" ed:height="43.5" ed:width="514"><path stroke="#696969" fill="none" d="M0,43.5L514,43.5" stroke-linejoin="round"/><text class="st3"><tspan style="white-space:pre" y="16.1" x="8">一组相同数据类型的组合，具有“后进先出”的特性，所有的操作均在堆栈结构的顶端</tspan><tspan style="white-space:pre" y="35.1" x="8">进行</tspan></text></g><g transform="matrix(1,0,0,1,820,896)" ed:parentid="152" id="396" ed:height="24.5" ed:width="473"><path stroke="#696969" fill="none" d="M0,24.5L473,24.5" stroke-linejoin="round"/><text class="st3"><tspan style="white-space:pre" y="16.1" x="8">一种“先进先出”的数据结构，和堆栈一样都是一种有序线性表的抽象数据类型</tspan></text></g><g transform="matrix(1,0,0,1,833,927)" ed:parentid="156" id="398" ed:height="24.5" ed:width="200"><path stroke="#696969" fill="none" d="M0,24.5L200,24.5" stroke-linejoin="round"/><text class="st3"><tspan style="white-space:pre" y="16.1" x="8">由一个或一个以上的几点所组成</tspan></text></g><g transform="matrix(1,0,0,1,833,958)" ed:parentid="156" id="400" ed:height="43.5" ed:width="514"><path stroke="#696969" fill="none" d="M0,43.5L514,43.5" stroke-linejoin="round"/><text class="st3"><tspan style="white-space:pre" y="16.1" x="8">度数、层数、高度、树叶或终端节点、父节点、子节点、祖先和子孙、兄弟节点、非终</tspan><tspan style="white-space:pre" y="35.1" x="8">端节点、同代、森林</tspan></text></g><g transform="matrix(1,0,0,1,794,1008)" ed:parentid="158" id="402" ed:height="43.5" ed:width="514"><path stroke="#696969" fill="none" d="M0,43.5L514,43.5" stroke-linejoin="round"/><text class="st3"><tspan style="white-space:pre" y="16.1" x="8">由有限节点所组成的集合，此集合可以为空集合，或由一个树根及其左右两个子树所组</tspan><tspan style="white-space:pre" y="35.1" x="8">成</tspan></text></g><g transform="matrix(1,0,0,1,725,1058)" ed:parentid="160" id="404" ed:height="24.5" ed:width="213"><path stroke="#696969" fill="none" d="M0,24.5L213,24.5" stroke-linejoin="round"/><text class="st3"><tspan style="white-space:pre" y="16.1" x="8">由“顶点”和“边”所组成的集合</tspan></text></g><g transform="matrix(1,0,0,1,725,1089)" ed:parentid="160" id="406" ed:height="24.5" ed:width="109"><path stroke="#696969" fill="none" d="M0,24.5L109,24.5" stroke-linejoin="round"/><text class="st3"><tspan style="white-space:pre" y="16.1" x="8">无向图、有向图</tspan></text></g><g transform="matrix(1,0,0,1,686,1120)" ed:parentid="162" id="408" ed:height="24.5" ed:width="447"><path stroke="#696969" fill="none" d="M0,24.5L447,24.5" stroke-linejoin="round"/><text class="st3"><tspan style="white-space:pre" y="16.1" x="8">一种存储记录的连续内存，通过哈希函数的应用，可以快速存取及查找数据</tspan></text></g><g transform="matrix(1,0,0,1,686,1151)" ed:parentid="162" id="410" ed:height="24.5" ed:width="434"><path stroke="#696969" fill="none" d="M0,24.5L434,24.5" stroke-linejoin="round"/><text class="st3"><tspan style="white-space:pre" y="16.1" x="8">相关名词：桶、槽、碰撞、溢出、哈希表、同义词、加载密度、完美哈希</tspan></text></g><g transform="matrix(1,0,0,1,686,1182)" ed:parentid="162" id="412" ed:height="62.5" ed:width="514"><path stroke="#696969" fill="none" d="M0,62.5L514,62.5" stroke-linejoin="round"/><text class="st3"><tspan style="white-space:pre" y="16.1" x="8">哈希函数设计原则：1、降低碰撞和溢出的产生；2、哈希函数不宜过于复杂，越容易</tspan><tspan style="white-space:pre" y="35.1" x="8">计算越佳；3、尽量把文字的键值转换成数字的键值，以利于哈希函数的运算；4、计</tspan><tspan style="white-space:pre" y="54.1" x="8">算出的值，尽量均匀分布在每一个桶中</tspan></text></g><g transform="matrix(1,0,0,1,651,1277)" ed:parentid="164" id="414" ed:height="24.5" ed:width="460"><path stroke="#696969" fill="none" d="M0,24.5L460,24.5" stroke-linejoin="round"/><text class="st3"><tspan style="white-space:pre" y="16.1" x="8">将一组数据，按特定规则调换位置，使数据具有某种顺序关系（递增或递减）</tspan></text></g><g transform="matrix(1,0,0,1,651,1308)" ed:parentid="164" id="416" ed:height="24.5" ed:width="499"><path stroke="#696969" fill="none" d="M0,24.5L499,24.5" stroke-linejoin="round"/><text class="st3"><tspan style="white-space:pre" y="16.1" x="8">排序的好处：数据较容易阅读；数据较利于统计和整理；可大幅减少数据查找的时间</tspan></text></g><g transform="matrix(1,0,0,1,664,1339)" ed:parentid="166" id="418" ed:height="43.5" ed:width="514"><path stroke="#696969" fill="none" d="M0,43.5L514,43.5" stroke-linejoin="round"/><text class="st3"><tspan style="white-space:pre" y="16.1" x="8">从第一个元素开始比较相邻元素的大小，若大小顺序有误，则对调后再进行下一个元素</tspan><tspan style="white-space:pre" y="35.1" x="8">的比较，就仿佛气泡逐渐从水底逐渐冒出到水面上一样</tspan></text></g><g transform="matrix(1,0,0,1,664,1389)" ed:parentid="168" id="420" ed:height="43.5" ed:width="514"><path stroke="#696969" fill="none" d="M0,43.5L514,43.5" stroke-linejoin="round"/><text class="st3"><tspan style="white-space:pre" y="16.1" x="8">反复从未排序的数列中取出最小的元素，加入到另一个数列中，最后的结果即为已排序</tspan><tspan style="white-space:pre" y="35.1" x="8">的数列</tspan></text></g><g transform="matrix(1,0,0,1,664,1439)" ed:parentid="170" id="422" ed:height="43.5" ed:width="514"><path stroke="#696969" fill="none" d="M0,43.5L514,43.5" stroke-linejoin="round"/><text class="st3"><tspan style="white-space:pre" y="16.1" x="8">将数组中的元素，逐一与已排序好的数据进行比较，前两个元素先排好，再将第三个元</tspan><tspan style="white-space:pre" y="35.1" x="8">素插入适当的位置，重复此步骤，直到排序完成</tspan></text></g><g transform="matrix(1,0,0,1,664,1489)" ed:parentid="172" id="424" ed:height="43.5" ed:width="514"><path stroke="#696969" fill="none" d="M0,43.5L514,43.5" stroke-linejoin="round"/><text class="st3"><tspan style="white-space:pre" y="16.1" x="8">将数据区分成特定间隔的几个小区块，以插入排序法排完区块内的数据后再逐渐减少间</tspan><tspan style="white-space:pre" y="35.1" x="8">隔的距离</tspan></text></g><g transform="matrix(1,0,0,1,664,1539)" ed:parentid="174" id="426" ed:height="43.5" ed:width="514"><path stroke="#696969" fill="none" d="M0,43.5L514,43.5" stroke-linejoin="round"/><text class="st3"><tspan style="white-space:pre" y="16.1" x="8">针对已排序好的两个或两个以上的数列（或数据文件）通过合并的方式，将其组合成一</tspan><tspan style="white-space:pre" y="35.1" x="8">个大的且已排好序的数列（或数据文件）</tspan></text></g><g transform="matrix(1,0,0,1,664,1589)" ed:parentid="176" id="428" ed:height="62.5" ed:width="514"><path stroke="#696969" fill="none" d="M0,62.5L514,62.5" stroke-linejoin="round"/><text class="st3"><tspan style="white-space:pre" y="16.1" x="8">先在数据中找到一个虚拟的中间值，并按此中间值将所有打算排序的数据分为两部分。</tspan><tspan style="white-space:pre" y="35.1" x="8">其中，小于中间值得数据放在左边，大于中间值得数据放在右边，再以同样的方式分别</tspan><tspan style="white-space:pre" y="54.1" x="8">处理左、右两边的数据，直到排序完为止</tspan></text></g><g transform="matrix(1,0,0,1,664,1658)" ed:parentid="178" id="430" ed:height="43.5" ed:width="514"><path stroke="#696969" fill="none" d="M0,43.5L514,43.5" stroke-linejoin="round"/><text class="st3"><tspan style="white-space:pre" y="16.1" x="8">与之前所讨论的排序法不太一样，并不需要进行元素间的比较操作，而是属于一种分配</tspan><tspan style="white-space:pre" y="35.1" x="8">模式排序方式</tspan></text></g><g transform="matrix(1,0,0,1,764,1735)" ed:parentid="180" id="432" ed:height="24.5" ed:width="369"><path stroke="#696969" fill="none" d="M0,24.5L369,24.5" stroke-linejoin="round"/><text class="st3"><tspan style="white-space:pre" y="16.1" x="8">影响查找时间长短的主要因素有算法、数据存储的方式及结构</tspan></text></g><g transform="matrix(1,0,0,1,885,1766)" ed:parentid="182" id="434" ed:height="24.5" ed:width="499"><path stroke="#696969" fill="none" d="M0,24.5L499,24.5" stroke-linejoin="round"/><text class="st3"><tspan style="white-space:pre" y="16.1" x="8">将数据一项一项地按顺序逐个查找，所以不管数据顺序如何，都得从头到尾遍历一次</tspan></text></g><g transform="matrix(1,0,0,1,885,1797)" ed:parentid="182" id="436" ed:height="24.5" ed:width="304"><path stroke="#696969" fill="none" d="M0,24.5L304,24.5" stroke-linejoin="round"/><text class="st3"><tspan style="white-space:pre" y="16.1" x="8">优点：文件在查找前不需要进行任何的处理与排序</tspan></text></g><g transform="matrix(1,0,0,1,885,1828)" ed:parentid="182" id="438" ed:height="24.5" ed:width="135"><path stroke="#696969" fill="none" d="M0,24.5L135,24.5" stroke-linejoin="round"/><text class="st3"><tspan style="white-space:pre" y="16.1" x="8">缺点：查找速度较慢</tspan></text></g><g transform="matrix(1,0,0,1,885,1859)" ed:parentid="184" id="440" ed:height="43.5" ed:width="514"><path stroke="#696969" fill="none" d="M0,43.5L514,43.5" stroke-linejoin="round"/><text class="st3"><tspan style="white-space:pre" y="16.1" x="8">将数据分割成两等份，再比较键值与中间值得大小，如果键值小于中间值，可确定要查</tspan><tspan style="white-space:pre" y="35.1" x="8">找的数据在前半段，否则在后半部分</tspan></text></g><g transform="matrix(1,0,0,1,885,1909)" ed:parentid="186" id="442" ed:height="43.5" ed:width="514"><path stroke="#696969" fill="none" d="M0,43.5L514,43.5" stroke-linejoin="round"/><text class="st3"><tspan style="white-space:pre" y="16.1" x="8">二分查找法的改进版，按照数据位置的分布，利用公式预测数据所在的位置，再以二分</tspan><tspan style="white-space:pre" y="35.1" x="8">法的方式渐渐逼近</tspan></text></g><g transform="matrix(1,0,0,1,751,1959)" ed:parentid="188" id="444" ed:height="62.5" ed:width="514"><path stroke="#696969" fill="none" d="M0,62.5L514,62.5" stroke-linejoin="round"/><text class="st3"><tspan style="white-space:pre" y="16.1" x="8">哈希法是使用哈希函数来计算一个键值所对应的地址，进而建立哈希表格，然后依靠哈</tspan><tspan style="white-space:pre" y="35.1" x="8">希函数来查找到各个键值存放在表格中的地址，查找速度与数据多少无关，在没有碰撞</tspan><tspan style="white-space:pre" y="54.1" x="8">和溢出的情况下，一次读取即可完成</tspan></text></g><g transform="matrix(1,0,0,1,751,2028)" ed:parentid="188" id="446" ed:height="24.5" ed:width="460"><path stroke="#696969" fill="none" d="M0,24.5L460,24.5" stroke-linejoin="round"/><text class="st3"><tspan style="white-space:pre" y="16.1" x="8">哈希函数设计原则上，至少必须符合计算速度快与碰撞频率尽量低的两个特点</tspan></text></g><g transform="matrix(1,0,0,1,872,2059)" ed:parentid="190" id="448" ed:height="24.5" ed:width="382"><path stroke="#696969" fill="none" d="M0,24.5L382,24.5" stroke-linejoin="round"/><text class="st3"><tspan style="white-space:pre" y="16.1" x="8">最简单的哈希函数是将数据除以某一个常数后，取余数来当索引</tspan></text></g><g transform="matrix(1,0,0,1,872,2090)" ed:parentid="192" id="450" ed:height="24.5" ed:width="330"><path stroke="#696969" fill="none" d="M0,24.5L330,24.5" stroke-linejoin="round"/><text class="st3"><tspan style="white-space:pre" y="16.1" x="8">先计算数据的平方，之后再取中间的某段数字作为索引</tspan></text></g><g transform="matrix(1,0,0,1,846,2121)" ed:parentid="194" id="452" ed:height="43.5" ed:width="514"><path stroke="#696969" fill="none" d="M0,43.5L514,43.5" stroke-linejoin="round"/><text class="st3"><tspan style="white-space:pre" y="16.1" x="8">将数据转换成一串数字后，先将这串数字拆分几个部分，再将它们加起来，就计算出这</tspan><tspan style="white-space:pre" y="35.1" x="8">个键值的Bucket Address（桶地址）</tspan></text></g><g transform="matrix(1,0,0,1,872,2171)" ed:parentid="196" id="454" ed:height="43.5" ed:width="514"><path stroke="#696969" fill="none" d="M0,43.5L514,43.5" stroke-linejoin="round"/><text class="st3"><tspan style="white-space:pre" y="16.1" x="8">适用于数据不会更改，且为数字类型的静态表。在决定哈希函数时先逐一检查数据的相</tspan><tspan style="white-space:pre" y="35.1" x="8">对位置和分布情况，将重复性高的部分删除</tspan></text></g><g transform="matrix(1,0,0,1,898,2221)" ed:parentid="200" id="456" ed:height="43.5" ed:width="514"><path stroke="#696969" fill="none" d="M0,43.5L514,43.5" stroke-linejoin="round"/><text class="st3"><tspan style="white-space:pre" y="16.1" x="8">当发生碰撞情况时，若该索引对应的存储位置已有数据，则以线性的方式玩后寻找空的</tspan><tspan style="white-space:pre" y="35.1" x="8">存储位置，一旦找到位置就把数据放进去</tspan></text></g><g transform="matrix(1,0,0,1,898,2271)" ed:parentid="200" id="458" ed:height="24.5" ed:width="239"><path stroke="#696969" fill="none" d="M0,24.5L239,24.5" stroke-linejoin="round"/><text class="st3"><tspan style="white-space:pre" y="16.1" x="8">缺点：就是相类似的键值会聚集在一起</tspan></text></g><g transform="matrix(1,0,0,1,898,2302)" ed:parentid="202" id="460" ed:height="43.5" ed:width="514"><path stroke="#696969" fill="none" d="M0,43.5L514,43.5" stroke-linejoin="round"/><text class="st3"><tspan style="white-space:pre" y="16.1" x="8">在平方探测中，当溢出发生时下一次查找的地址是(f(x)+i^2) mod B与(f(x)-i^2) mod </tspan><tspan style="white-space:pre" y="35.1" x="8">B，即让数据值加或减i的平方</tspan></text></g><g transform="matrix(1,0,0,1,885,2352)" ed:parentid="204" id="462" ed:height="43.5" ed:width="514"><path stroke="#696969" fill="none" d="M0,43.5L514,43.5" stroke-linejoin="round"/><text class="st3"><tspan style="white-space:pre" y="16.1" x="8">一开始就先设置一系列的哈希函数，如果使用第一种哈希函数出现溢出时就改用第二</tspan><tspan style="white-space:pre" y="35.1" x="8">种，如果第二种也出现溢出则改用第三种，一直到没有发生溢出为止</tspan></text></g><g transform="matrix(1,0,0,1,580,2472)" ed:parentid="110" id="464" ed:height="24.5" ed:width="96"><path stroke="#696969" fill="none" d="M0,24.5L96,24.5" stroke-linejoin="round"/><text class="st3"><tspan style="white-space:pre" y="16.1" x="8">数据存储结构</tspan></text></g><g transform="matrix(1,0,0,1,703,2428)" ed:parentid="464" id="466" ed:height="62.5" ed:width="514"><path stroke="#696969" fill="none" d="M0,62.5L514,62.5" stroke-linejoin="round"/><text class="st3"><tspan style="white-space:pre" y="16.1" x="8">静态数据结构：使用连续分配的内存空间来存储有序表中的数据。优点：设计相当简</tspan><tspan style="white-space:pre" y="35.1" x="8">单，而且读取与修改表中任意一个元素的时间都是固定的；缺点：删除或加入数据时，</tspan><tspan style="white-space:pre" y="54.1" x="8">需要移动大量的数据</tspan></text></g><g transform="matrix(1,0,0,1,703,2497)" ed:parentid="464" id="468" ed:height="43.5" ed:width="514"><path stroke="#696969" fill="none" d="M0,43.5L514,43.5" stroke-linejoin="round"/><text class="st3"><tspan style="white-space:pre" y="16.1" x="8">动态数据结构：使用不连续的内存空间存储具有线性表特性的数据。优点：数据的插入</tspan><tspan style="white-space:pre" y="35.1" x="8">或删除都相当方便，不需要移动大量数据；缺点：设计时较为麻烦，也无法随机读取</tspan></text></g><g transform="matrix(1,0,0,1,738,2760)" ed:parentid="222" id="471" ed:height="24.5" ed:width="161"><path stroke="#696969" fill="none" d="M0,24.5L161,24.5" stroke-linejoin="round"/><text class="st3"><tspan style="white-space:pre" y="16.1" x="8">好处是设计算法相当简单</tspan></text></g><g transform="matrix(1,0,0,1,738,2791)" ed:parentid="224" id="473" ed:height="24.5" ed:width="499"><path stroke="#696969" fill="none" d="M0,24.5L499,24.5" stroke-linejoin="round"/><text class="st3"><tspan style="white-space:pre" y="16.1" x="8">优点是随时可以动态改变链表长度，有效利用内存资源，缺点是设计的算法较为复杂</tspan></text></g><g transform="matrix(1,0,0,1,712,2822)" ed:parentid="226" id="475" ed:height="24.5" ed:width="213"><path stroke="#696969" fill="none" d="M0,24.5L213,24.5" stroke-linejoin="round"/><text class="st3"><tspan style="white-space:pre" y="16.1" x="8">使用递归法与堆栈概念来解决问题</tspan></text></g><g transform="matrix(1,0,0,1,712,2853)" ed:parentid="228" id="477" ed:height="24.5" ed:width="187"><path stroke="#696969" fill="none" d="M0,24.5L187,24.5" stroke-linejoin="round"/><text class="st3"><tspan style="white-space:pre" y="16.1" x="8">结合堆栈和回溯两种数据结构</tspan></text></g><g transform="matrix(1,0,0,1,738,2884)" ed:parentid="230" id="479" ed:height="24.5" ed:width="447"><path stroke="#696969" fill="none" d="M0,24.5L447,24.5" stroke-linejoin="round"/><text class="st3"><tspan style="white-space:pre" y="16.1" x="8">好处是算法相当简单，缺点是数组大小无法根据队列的实际需要来动态申请</tspan></text></g><g transform="matrix(1,0,0,1,699,2946)" ed:parentid="234" id="481" ed:height="43.5" ed:width="514"><path stroke="#696969" fill="none" d="M0,43.5L514,43.5" stroke-linejoin="round"/><text class="st3"><tspan style="white-space:pre" y="16.1" x="8">允许队列两端中的任意一端都具备删除或加入功能，而且无论左右两端的队列，队首与</tspan><tspan style="white-space:pre" y="35.1" x="8">队尾指针都是朝队列中央来移动</tspan></text></g><g transform="matrix(1,0,0,1,699,2996)" ed:parentid="236" id="483" ed:height="43.5" ed:width="514"><path stroke="#696969" fill="none" d="M0,43.5L514,43.5" stroke-linejoin="round"/><text class="st3"><tspan style="white-space:pre" y="16.1" x="8">一种不必遵守队列特性FIFO（先进先出）的有序线性表，其中每一个元素都赋予一个</tspan><tspan style="white-space:pre" y="35.1" x="8">优先级，加入元素时可任意加入，但有最高优先级者则最先输出</tspan></text></g><g transform="matrix(1,0,0,1,596,3072)" ed:parentid="114" id="485" ed:height="24.5" ed:width="408"><path stroke="#696969" fill="none" d="M0,24.5L408,24.5" stroke-linejoin="round"/><text class="st3"><tspan style="white-space:pre" y="16.1" x="8">特殊的二叉树结构：满二叉树、完全二叉树、斜二叉树、严格二叉树</tspan></text></g><g transform="matrix(1,0,0,1,728,3165)" ed:parentid="242" id="487" ed:height="24.5" ed:width="395"><path stroke="#696969" fill="none" d="M0,24.5L395,24.5" stroke-linejoin="round"/><text class="st3"><tspan style="white-space:pre" y="16.1" x="8">中序遍历（左中右）、后序遍历（左右中）、前序遍历（中左右）</tspan></text></g><g transform="matrix(1,0,0,1,741,3289)" ed:parentid="250" id="489" ed:height="24.5" ed:width="473"><path stroke="#696969" fill="none" d="M0,24.5L473,24.5" stroke-linejoin="round"/><text class="st3"><tspan style="white-space:pre" y="16.1" x="8">选择排序法的改进版，可以减少在选择排序法中的比较次数，进而减少排序时间</tspan></text></g><g transform="matrix(1,0,0,1,628,3347)" ed:parentid="116" id="491" ed:height="43.5" ed:width="514"><path stroke="#696969" fill="none" d="M0,43.5L514,43.5" stroke-linejoin="round"/><text class="st3"><tspan style="white-space:pre" y="16.1" x="8">图除了被应用在数据结构中最短路径搜索、拓扑排序外，还能应用在系统分析中以时间</tspan><tspan style="white-space:pre" y="35.1" x="8">为评审标准的性能评审技术</tspan></text></g><g transform="matrix(1,0,0,1,881,3397)" ed:parentid="258" id="493" ed:height="62.5" ed:width="514"><path stroke="#696969" fill="none" d="M0,62.5L514,62.5" stroke-linejoin="round"/><text class="st3"><tspan style="white-space:pre" y="16.1" x="8">有点类似于前序遍历，从图的某一顶点开始遍历，被访问过的顶点就做上已访问的记</tspan><tspan style="white-space:pre" y="35.1" x="8">号，接着遍历此顶点所有相邻且未访问过的顶点中的任意一个顶点，并做上已访问的记</tspan><tspan style="white-space:pre" y="54.1" x="8">号，再以该点为新的起点继续进行深度优先的搜索</tspan></text></g><g transform="matrix(1,0,0,1,881,3466)" ed:parentid="258" id="495" ed:height="24.5" ed:width="239"><path stroke="#696969" fill="none" d="M0,24.5L239,24.5" stroke-linejoin="round"/><text class="st3"><tspan style="white-space:pre" y="16.1" x="8">结合了递归和堆栈两种数据结构的技巧</tspan></text></g><g transform="matrix(1,0,0,1,881,3497)" ed:parentid="260" id="497" ed:height="62.5" ed:width="514"><path stroke="#696969" fill="none" d="M0,62.5L514,62.5" stroke-linejoin="round"/><text class="st3"><tspan style="white-space:pre" y="16.1" x="8">从图的某个顶点开始遍历，被访问过的顶点就做上已访问的记号。接着遍历此顶点的所</tspan><tspan style="white-space:pre" y="35.1" x="8">有相邻且未访问过的顶点中德任意一个顶点，并做上已访问的记号，再以该点为新的起</tspan><tspan style="white-space:pre" y="54.1" x="8">点继续进行广度优先的遍历</tspan></text></g><g transform="matrix(1,0,0,1,881,3566)" ed:parentid="260" id="499" ed:height="24.5" ed:width="148"><path stroke="#696969" fill="none" d="M0,24.5L148,24.5" stroke-linejoin="round"/><text class="st3"><tspan style="white-space:pre" y="16.1" x="8">使用队列和递归的技巧</tspan></text></g><g transform="matrix(1,0,0,1,814,3597)" ed:parentid="254" id="501" ed:height="24.5" ed:width="252"><path stroke="#696969" fill="none" d="M0,24.5L252,24.5" stroke-linejoin="round"/><text class="st3"><tspan style="white-space:pre" y="16.1" x="8">计算连通网络中每个顶点所需的最少花费</tspan></text></g><g transform="matrix(1,0,0,1,786,3690)" ed:parentid="256" id="503" ed:height="24.5" ed:width="291"><path stroke="#696969" fill="none" d="M0,24.5L291,24.5" stroke-linejoin="round"/><text class="st3"><tspan style="white-space:pre" y="16.1" x="8">计算连通树中任意两顶点的路径花费最少的路径</tspan></text></g><symbol id="plus"><path fill="url(#lg1)" d="M11,6C11,8.8,8.8,11,6,11C3.2,11,1,8.8,1,6C1,3.2,3.2,1,6,1C8.8,1,11,3.2,11,6z"/><path fill="none" stroke="#46a000" d="M11,6C11,8.8,8.8,11,6,11C3.2,11,1,8.8,1,6C1,3.2,3.2,1,6,1C8.8,1,11,3.2,11,6zM3,6L9,6M6,3L6,9" stroke-width="0.7"/></symbol><symbol id="minus"><path fill="url(#lg1)" d="M11,6C11,8.8,8.8,11,6,11C3.2,11,1,8.8,1,6C1,3.2,3.2,1,6,1C8.8,1,11,3.2,11,6z"/><path fill="none" stroke="#46a000" d="M11,6C11,8.8,8.8,11,6,11C3.2,11,1,8.8,1,6C1,3.2,3.2,1,6,1C8.8,1,11,3.2,11,6zM3,6L9,6" stroke-width="0.7"/></symbol><g transform="translate(294,1893)" ed:togtopicid="101"><use xlink:href="#minus"/></g><g transform="translate(554,283)" ed:togtopicid="102"><use xlink:href="#minus"/></g><g transform="translate(554,911)" ed:togtopicid="104"><use xlink:href="#minus"/></g><g transform="translate(506,1483)" ed:togtopicid="106"><use xlink:href="#minus"/></g><g transform="translate(554,2059)" ed:togtopicid="108"><use xlink:href="#minus"/></g><g transform="translate(554,2571)" ed:togtopicid="110"><use xlink:href="#minus"/></g><g transform="translate(554,2893)" ed:togtopicid="112"><use xlink:href="#minus"/></g><g transform="translate(570,3187)" ed:togtopicid="114"><use xlink:href="#minus"/></g><g transform="translate(602,3555)" ed:togtopicid="116"><use xlink:href="#minus"/></g><g transform="translate(738,83)" ed:togtopicid="118"><use xlink:href="#minus"/></g><g transform="translate(809,52)" ed:togtopicid="120"><use xlink:href="#minus"/></g><g transform="translate(809,108)" ed:togtopicid="122"><use xlink:href="#minus"/></g><g transform="translate(848,139)" ed:togtopicid="124"><use xlink:href="#minus"/></g><g transform="translate(699,355)" ed:togtopicid="126"><use xlink:href="#minus"/></g><g transform="translate(794,180)" ed:togtopicid="128"><use xlink:href="#minus"/></g><g transform="translate(794,245)" ed:togtopicid="130"><use xlink:href="#minus"/></g><g transform="translate(794,320)" ed:togtopicid="132"><use xlink:href="#minus"/></g><g transform="translate(820,380)" ed:togtopicid="134"><use xlink:href="#minus"/></g><g transform="translate(794,430)" ed:togtopicid="136"><use xlink:href="#minus"/></g><g transform="translate(794,489)" ed:togtopicid="138"><use xlink:href="#minus"/></g><g transform="translate(794,539)" ed:togtopicid="140"><use xlink:href="#minus"/></g><g transform="translate(699,653)" ed:togtopicid="142"><use xlink:href="#minus"/></g><g transform="translate(712,821)" ed:togtopicid="144"><use xlink:href="#minus"/></g><g transform="translate(794,740)" ed:togtopicid="146"><use xlink:href="#minus"/></g><g transform="translate(794,796)" ed:togtopicid="148"><use xlink:href="#minus"/></g><g transform="translate(794,861)" ed:togtopicid="150"><use xlink:href="#minus"/></g><g transform="translate(794,902)" ed:togtopicid="152"><use xlink:href="#minus"/></g><g transform="translate(673,983)" ed:togtopicid="154"><use xlink:href="#minus"/></g><g transform="translate(807,958)" ed:togtopicid="156"><use xlink:href="#minus"/></g><g transform="translate(768,1023)" ed:togtopicid="158"><use xlink:href="#minus"/></g><g transform="translate(699,1079)" ed:togtopicid="160"><use xlink:href="#minus"/></g><g transform="translate(660,1176)" ed:togtopicid="162"><use xlink:href="#minus"/></g><g transform="translate(625,1299)" ed:togtopicid="164"><use xlink:href="#minus"/></g><g transform="translate(638,1355)" ed:togtopicid="166"><use xlink:href="#minus"/></g><g transform="translate(638,1405)" ed:togtopicid="168"><use xlink:href="#minus"/></g><g transform="translate(638,1455)" ed:togtopicid="170"><use xlink:href="#minus"/></g><g transform="translate(638,1505)" ed:togtopicid="172"><use xlink:href="#minus"/></g><g transform="translate(638,1555)" ed:togtopicid="174"><use xlink:href="#minus"/></g><g transform="translate(638,1614)" ed:togtopicid="176"><use xlink:href="#minus"/></g><g transform="translate(638,1674)" ed:togtopicid="178"><use xlink:href="#minus"/></g><g transform="translate(738,1837)" ed:togtopicid="180"><use xlink:href="#minus"/></g><g transform="translate(859,1803)" ed:togtopicid="182"><use xlink:href="#minus"/></g><g transform="translate(859,1874)" ed:togtopicid="184"><use xlink:href="#minus"/></g><g transform="translate(859,1924)" ed:togtopicid="186"><use xlink:href="#minus"/></g><g transform="translate(725,2080)" ed:togtopicid="188"><use xlink:href="#minus"/></g><g transform="translate(846,2065)" ed:togtopicid="190"><use xlink:href="#minus"/></g><g transform="translate(846,2096)" ed:togtopicid="192"><use xlink:href="#minus"/></g><g transform="translate(820,2136)" ed:togtopicid="194"><use xlink:href="#minus"/></g><g transform="translate(846,2186)" ed:togtopicid="196"><use xlink:href="#minus"/></g><g transform="translate(751,2302)" ed:togtopicid="198"><use xlink:href="#minus"/></g><g transform="translate(872,2252)" ed:togtopicid="200"><use xlink:href="#minus"/></g><g transform="translate(872,2317)" ed:togtopicid="202"><use xlink:href="#minus"/></g><g transform="translate(859,2367)" ed:togtopicid="204"><use xlink:href="#minus"/></g><g transform="translate(647,2584)" ed:togtopicid="206"><use xlink:href="#minus"/></g><g transform="translate(699,2677)" ed:togtopicid="214"><use xlink:href="#minus"/></g><g transform="translate(712,2766)" ed:togtopicid="222"><use xlink:href="#minus"/></g><g transform="translate(712,2797)" ed:togtopicid="224"><use xlink:href="#minus"/></g><g transform="translate(686,2828)" ed:togtopicid="226"><use xlink:href="#minus"/></g><g transform="translate(686,2859)" ed:togtopicid="228"><use xlink:href="#minus"/></g><g transform="translate(712,2890)" ed:togtopicid="230"><use xlink:href="#minus"/></g><g transform="translate(673,2961)" ed:togtopicid="234"><use xlink:href="#minus"/></g><g transform="translate(673,3011)" ed:togtopicid="236"><use xlink:href="#minus"/></g><g transform="translate(702,3171)" ed:togtopicid="242"><use xlink:href="#minus"/></g><g transform="translate(715,3295)" ed:togtopicid="250"><use xlink:href="#minus"/></g><g transform="translate(721,3487)" ed:togtopicid="252"><use xlink:href="#minus"/></g><g transform="translate(788,3634)" ed:togtopicid="254"><use xlink:href="#minus"/></g><g transform="translate(760,3727)" ed:togtopicid="256"><use xlink:href="#minus"/></g><g transform="translate(855,3437)" ed:togtopicid="258"><use xlink:href="#minus"/></g><g transform="translate(855,3537)" ed:togtopicid="260"><use xlink:href="#minus"/></g><g transform="translate(677,2478)" ed:togtopicid="464"><use xlink:href="#minus"/></g></svg>